// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer, formDataBodySerializer } from './client';
import type { RegisterApiV1AuthRegisterPostData, RegisterApiV1AuthRegisterPostResponses, RegisterApiV1AuthRegisterPostErrors, LoginApiV1AuthLoginPostData, LoginApiV1AuthLoginPostResponses, LoginApiV1AuthLoginPostErrors, VerifyEmailApiV1AuthVerifyEmailPostData, VerifyEmailApiV1AuthVerifyEmailPostResponses, VerifyEmailApiV1AuthVerifyEmailPostErrors, ForgotPasswordApiV1AuthForgotPasswordPostData, ForgotPasswordApiV1AuthForgotPasswordPostResponses, ForgotPasswordApiV1AuthForgotPasswordPostErrors, ResetPasswordApiV1AuthResetPasswordPostData, ResetPasswordApiV1AuthResetPasswordPostResponses, ResetPasswordApiV1AuthResetPasswordPostErrors, OauthLoginApiV1AuthOauthLoginPostData, OauthLoginApiV1AuthOauthLoginPostResponses, OauthLoginApiV1AuthOauthLoginPostErrors, RefreshTokenApiV1AuthRefreshPostData, RefreshTokenApiV1AuthRefreshPostResponses, RefreshTokenApiV1AuthRefreshPostErrors, LogoutApiV1AuthLogoutPostData, LogoutApiV1AuthLogoutPostResponses, LogoutApiV1AuthLogoutPostErrors, LogoutAllApiV1AuthLogoutAllPostData, LogoutAllApiV1AuthLogoutAllPostResponses, ReadUsersMeApiV1UsersMeGetData, ReadUsersMeApiV1UsersMeGetResponses, UpdateUserMeApiV1UsersMePutData, UpdateUserMeApiV1UsersMePutResponses, UpdateUserMeApiV1UsersMePutErrors, AdminListUsersApiV1AdminUsersGetData, AdminListUsersApiV1AdminUsersGetResponses, AdminListUsersApiV1AdminUsersGetErrors, DeleteUserApiV1UsersUserIdDeleteData, DeleteUserApiV1UsersUserIdDeleteResponses, DeleteUserApiV1UsersUserIdDeleteErrors, ReadUserApiV1UsersUserIdGetData, ReadUserApiV1UsersUserIdGetResponses, ReadUserApiV1UsersUserIdGetErrors, AdminDeleteUserApiV1AdminUsersUserIdDeleteData, AdminDeleteUserApiV1AdminUsersUserIdDeleteResponses, AdminDeleteUserApiV1AdminUsersUserIdDeleteErrors, AdminGetUserApiV1AdminUsersUserIdGetData, AdminGetUserApiV1AdminUsersUserIdGetResponses, AdminGetUserApiV1AdminUsersUserIdGetErrors, AdminUpdateUserApiV1AdminUsersUserIdPutData, AdminUpdateUserApiV1AdminUsersUserIdPutResponses, AdminUpdateUserApiV1AdminUsersUserIdPutErrors, AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostData, AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostResponses, AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostErrors, AdminGetStatsApiV1AdminStatsGetData, AdminGetStatsApiV1AdminStatsGetResponses, AdminGetRecentUsersApiV1AdminRecentUsersGetData, AdminGetRecentUsersApiV1AdminRecentUsersGetResponses, AdminGetRecentUsersApiV1AdminRecentUsersGetErrors, AdminGetEmailStatusApiV1AdminEmailStatusGetData, AdminGetEmailStatusApiV1AdminEmailStatusGetResponses, GetMyProfileApiV1UsersMeProfileGetData, GetMyProfileApiV1UsersMeProfileGetResponses, UpdateMyProfileApiV1UsersMeProfilePutData, UpdateMyProfileApiV1UsersMeProfilePutResponses, UpdateMyProfileApiV1UsersMeProfilePutErrors, GetUserProfileApiV1UsersUserIdProfileGetData, GetUserProfileApiV1UsersUserIdProfileGetResponses, GetUserProfileApiV1UsersUserIdProfileGetErrors, DeleteProfilePictureApiV1UsersMeProfilePictureDeleteData, DeleteProfilePictureApiV1UsersMeProfilePictureDeleteResponses, UploadProfilePictureApiV1UsersMeProfilePicturePostData, UploadProfilePictureApiV1UsersMeProfilePicturePostResponses, UploadProfilePictureApiV1UsersMeProfilePicturePostErrors, UploadAvatarApiV1UsersMeAvatarPostData, UploadAvatarApiV1UsersMeAvatarPostResponses, UploadAvatarApiV1UsersMeAvatarPostErrors, TestStorageConnectionApiV1StorageTestConnectionGetData, TestStorageConnectionApiV1StorageTestConnectionGetResponses, GetStorageProfileApiV1StorageProfileGetData, GetStorageProfileApiV1StorageProfileGetResponses, UploadFileApiV1StorageUploadPostData, UploadFileApiV1StorageUploadPostResponses, UploadFileApiV1StorageUploadPostErrors, ListFilesApiV1StorageFilesGetData, ListFilesApiV1StorageFilesGetResponses, ListFilesApiV1StorageFilesGetErrors, DeleteFileApiV1StorageFilesFileIdDeleteData, DeleteFileApiV1StorageFilesFileIdDeleteResponses, DeleteFileApiV1StorageFilesFileIdDeleteErrors, GetFileInfoApiV1StorageFilesFileIdGetData, GetFileInfoApiV1StorageFilesFileIdGetResponses, GetFileInfoApiV1StorageFilesFileIdGetErrors, CreateShareLinkApiV1StorageFilesFileIdSharePostData, CreateShareLinkApiV1StorageFilesFileIdSharePostResponses, CreateShareLinkApiV1StorageFilesFileIdSharePostErrors, DownloadFileApiV1StorageFilesFileIdDownloadGetData, DownloadFileApiV1StorageFilesFileIdDownloadGetResponses, DownloadFileApiV1StorageFilesFileIdDownloadGetErrors, ListCompaniesApiV1ContactsCompaniesGetData, ListCompaniesApiV1ContactsCompaniesGetResponses, ListCompaniesApiV1ContactsCompaniesGetErrors, CreateCompanyApiV1ContactsCompaniesPostData, CreateCompanyApiV1ContactsCompaniesPostResponses, CreateCompanyApiV1ContactsCompaniesPostErrors, DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteData, DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteResponses, DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteErrors, GetCompanyApiV1ContactsCompaniesCompanyIdGetData, GetCompanyApiV1ContactsCompaniesCompanyIdGetResponses, GetCompanyApiV1ContactsCompaniesCompanyIdGetErrors, UpdateCompanyApiV1ContactsCompaniesCompanyIdPutData, UpdateCompanyApiV1ContactsCompaniesCompanyIdPutResponses, UpdateCompanyApiV1ContactsCompaniesCompanyIdPutErrors, ListPeopleApiV1ContactsPeopleGetData, ListPeopleApiV1ContactsPeopleGetResponses, ListPeopleApiV1ContactsPeopleGetErrors, CreatePersonApiV1ContactsPeoplePostData, CreatePersonApiV1ContactsPeoplePostResponses, CreatePersonApiV1ContactsPeoplePostErrors, DeletePersonApiV1ContactsPeoplePersonIdDeleteData, DeletePersonApiV1ContactsPeoplePersonIdDeleteResponses, DeletePersonApiV1ContactsPeoplePersonIdDeleteErrors, GetPersonApiV1ContactsPeoplePersonIdGetData, GetPersonApiV1ContactsPeoplePersonIdGetResponses, GetPersonApiV1ContactsPeoplePersonIdGetErrors, UpdatePersonApiV1ContactsPeoplePersonIdPutData, UpdatePersonApiV1ContactsPeoplePersonIdPutResponses, UpdatePersonApiV1ContactsPeoplePersonIdPutErrors, UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutData, UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutResponses, UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutErrors, UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutData, UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutResponses, UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutErrors, UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostData, UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostResponses, UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostErrors, ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetData, ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetResponses, ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetErrors, DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteData, DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteResponses, DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteErrors, DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetData, DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetResponses, DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetErrors, GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetData, GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetResponses, GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetErrors, ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetData, ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetResponses, ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetErrors, GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetData, GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetResponses, GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetErrors, ListPublicCompaniesApiV1ContactsPublicCompaniesGetData, ListPublicCompaniesApiV1ContactsPublicCompaniesGetResponses, ListPublicCompaniesApiV1ContactsPublicCompaniesGetErrors, GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetData, GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetResponses, GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetErrors, ListPublicPeopleApiV1ContactsPublicPeopleGetData, ListPublicPeopleApiV1ContactsPublicPeopleGetResponses, ListPublicPeopleApiV1ContactsPublicPeopleGetErrors, GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetData, GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetResponses, GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetErrors, ListAssociationsApiV1ContactsAssociationsGetData, ListAssociationsApiV1ContactsAssociationsGetResponses, ListAssociationsApiV1ContactsAssociationsGetErrors, CreateAssociationApiV1ContactsAssociationsPostData, CreateAssociationApiV1ContactsAssociationsPostResponses, CreateAssociationApiV1ContactsAssociationsPostErrors, DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteData, DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteResponses, DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteErrors, UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutData, UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutResponses, UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutErrors, GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetData, GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetResponses, GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetErrors, GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetData, GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetResponses, GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetErrors, GetTagStatsApiV1TagsStatsGetData, GetTagStatsApiV1TagsStatsGetResponses, GetTagCloudApiV1TagsCloudGetData, GetTagCloudApiV1TagsCloudGetResponses, GetTagCloudApiV1TagsCloudGetErrors, AutocompleteTagsApiV1TagsAutocompleteGetData, AutocompleteTagsApiV1TagsAutocompleteGetResponses, AutocompleteTagsApiV1TagsAutocompleteGetErrors, GetObjectTagsApiV1TagsObjectTagsGetData, GetObjectTagsApiV1TagsObjectTagsGetResponses, GetObjectTagsApiV1TagsObjectTagsGetErrors, ListTagsApiV1TagsGetData, ListTagsApiV1TagsGetResponses, ListTagsApiV1TagsGetErrors, CreateTagApiV1TagsPostData, CreateTagApiV1TagsPostResponses, CreateTagApiV1TagsPostErrors, DeleteTagApiV1TagsTagIdDeleteData, DeleteTagApiV1TagsTagIdDeleteResponses, DeleteTagApiV1TagsTagIdDeleteErrors, GetTagApiV1TagsTagIdGetData, GetTagApiV1TagsTagIdGetResponses, GetTagApiV1TagsTagIdGetErrors, UpdateTagApiV1TagsTagIdPutData, UpdateTagApiV1TagsTagIdPutResponses, UpdateTagApiV1TagsTagIdPutErrors, TagObjectApiV1TagsTagObjectPostData, TagObjectApiV1TagsTagObjectPostResponses, TagObjectApiV1TagsTagObjectPostErrors, UntagObjectApiV1TagsUntagObjectDeleteData, UntagObjectApiV1TagsUntagObjectDeleteResponses, UntagObjectApiV1TagsUntagObjectDeleteErrors, GetTaggedObjectsApiV1TagsTagSlugObjectsGetData, GetTaggedObjectsApiV1TagsTagSlugObjectsGetResponses, GetTaggedObjectsApiV1TagsTagSlugObjectsGetErrors, GetRelatedTagsApiV1TagsTagSlugRelatedGetData, GetRelatedTagsApiV1TagsTagSlugRelatedGetResponses, GetRelatedTagsApiV1TagsTagSlugRelatedGetErrors, BulkCreateTagsApiV1TagsBulkCreatePostData, BulkCreateTagsApiV1TagsBulkCreatePostResponses, BulkCreateTagsApiV1TagsBulkCreatePostErrors, BulkDeleteTagsApiV1TagsBulkDeleteDeleteData, BulkDeleteTagsApiV1TagsBulkDeleteDeleteResponses, BulkDeleteTagsApiV1TagsBulkDeleteDeleteErrors, ListImagesApiV1ImagesGetData, ListImagesApiV1ImagesGetResponses, ListImagesApiV1ImagesGetErrors, CreateImageApiV1ImagesPostData, CreateImageApiV1ImagesPostResponses, CreateImageApiV1ImagesPostErrors, DeleteImageApiV1ImagesImageIdDeleteData, DeleteImageApiV1ImagesImageIdDeleteResponses, DeleteImageApiV1ImagesImageIdDeleteErrors, GetImageApiV1ImagesImageIdGetData, GetImageApiV1ImagesImageIdGetResponses, GetImageApiV1ImagesImageIdGetErrors, UpdateImageApiV1ImagesImageIdPutData, UpdateImageApiV1ImagesImageIdPutResponses, UpdateImageApiV1ImagesImageIdPutErrors, BulkUploadImagesApiV1ImagesBulkUploadPostData, BulkUploadImagesApiV1ImagesBulkUploadPostResponses, BulkUploadImagesApiV1ImagesBulkUploadPostErrors, BulkTagImagesApiV1ImagesBulkTagPostData, BulkTagImagesApiV1ImagesBulkTagPostResponses, BulkTagImagesApiV1ImagesBulkTagPostErrors, RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostData, RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostResponses, RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostErrors, GetImageMetadataApiV1ImagesImageIdMetadataGetData, GetImageMetadataApiV1ImagesImageIdMetadataGetResponses, GetImageMetadataApiV1ImagesImageIdMetadataGetErrors, GetImageStatsApiV1ImagesAdminStatsGetData, GetImageStatsApiV1ImagesAdminStatsGetResponses, RootGetData, RootGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Register
 */
export const registerApiV1AuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterApiV1AuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterApiV1AuthRegisterPostResponses, RegisterApiV1AuthRegisterPostErrors, ThrowOnError>({
        url: '/api/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login
 */
export const loginApiV1AuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginApiV1AuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginApiV1AuthLoginPostResponses, LoginApiV1AuthLoginPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Verify Email
 */
export const verifyEmailApiV1AuthVerifyEmailPost = <ThrowOnError extends boolean = false>(options: Options<VerifyEmailApiV1AuthVerifyEmailPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<VerifyEmailApiV1AuthVerifyEmailPostResponses, VerifyEmailApiV1AuthVerifyEmailPostErrors, ThrowOnError>({
        url: '/api/v1/auth/verify-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Forgot Password
 */
export const forgotPasswordApiV1AuthForgotPasswordPost = <ThrowOnError extends boolean = false>(options: Options<ForgotPasswordApiV1AuthForgotPasswordPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ForgotPasswordApiV1AuthForgotPasswordPostResponses, ForgotPasswordApiV1AuthForgotPasswordPostErrors, ThrowOnError>({
        url: '/api/v1/auth/forgot-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Reset Password
 */
export const resetPasswordApiV1AuthResetPasswordPost = <ThrowOnError extends boolean = false>(options: Options<ResetPasswordApiV1AuthResetPasswordPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetPasswordApiV1AuthResetPasswordPostResponses, ResetPasswordApiV1AuthResetPasswordPostErrors, ThrowOnError>({
        url: '/api/v1/auth/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Oauth Login
 * OAuth login/signup endpoint that either:
 * 1. Links OAuth to existing account with same email
 * 2. Creates new account if email doesn't exist
 */
export const oauthLoginApiV1AuthOauthLoginPost = <ThrowOnError extends boolean = false>(options: Options<OauthLoginApiV1AuthOauthLoginPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OauthLoginApiV1AuthOauthLoginPostResponses, OauthLoginApiV1AuthOauthLoginPostErrors, ThrowOnError>({
        url: '/api/v1/auth/oauth-login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh Token
 * Refresh access token using a valid refresh token.
 *
 * This endpoint allows clients to obtain a new access token without re-authenticating
 * by providing a valid refresh token. The refresh token can optionally be rotated
 * for enhanced security.
 */
export const refreshTokenApiV1AuthRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshTokenApiV1AuthRefreshPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshTokenApiV1AuthRefreshPostResponses, RefreshTokenApiV1AuthRefreshPostErrors, ThrowOnError>({
        url: '/api/v1/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout
 * Logout endpoint that revokes a refresh token.
 *
 * This endpoint allows clients to securely logout by revoking their refresh token,
 * preventing future token refresh operations. Optionally supports revoking all
 * tokens for a user for enhanced security.
 */
export const logoutApiV1AuthLogoutPost = <ThrowOnError extends boolean = false>(options: Options<LogoutApiV1AuthLogoutPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LogoutApiV1AuthLogoutPostResponses, LogoutApiV1AuthLogoutPostErrors, ThrowOnError>({
        url: '/api/v1/auth/logout',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout All
 * Logout from all devices by revoking all refresh tokens for the current user.
 *
 * This endpoint requires authentication and revokes all active refresh tokens
 * for the authenticated user, effectively logging them out from all devices.
 */
export const logoutAllApiV1AuthLogoutAllPost = <ThrowOnError extends boolean = false>(options?: Options<LogoutAllApiV1AuthLogoutAllPostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutAllApiV1AuthLogoutAllPostResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/auth/logout-all',
        ...options
    });
};

/**
 * Read Users Me
 */
export const readUsersMeApiV1UsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersMeApiV1UsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadUsersMeApiV1UsersMeGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options
    });
};

/**
 * Update User Me
 */
export const updateUserMeApiV1UsersMePut = <ThrowOnError extends boolean = false>(options: Options<UpdateUserMeApiV1UsersMePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserMeApiV1UsersMePutResponses, UpdateUserMeApiV1UsersMePutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Admin List Users
 * Admin endpoint for paginated user listing with search and filtering
 */
export const adminListUsersApiV1AdminUsersGet = <ThrowOnError extends boolean = false>(options?: Options<AdminListUsersApiV1AdminUsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminListUsersApiV1AdminUsersGetResponses, AdminListUsersApiV1AdminUsersGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/admin/users',
        ...options
    });
};

/**
 * Delete User
 */
export const deleteUserApiV1UsersUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserApiV1UsersUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserApiV1UsersUserIdDeleteResponses, DeleteUserApiV1UsersUserIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Read User
 */
export const readUserApiV1UsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<ReadUserApiV1UsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadUserApiV1UsersUserIdGetResponses, ReadUserApiV1UsersUserIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}',
        ...options
    });
};

/**
 * Admin Delete User
 * Admin endpoint to delete a user (superuser only)
 */
export const adminDeleteUserApiV1AdminUsersUserIdDelete = <ThrowOnError extends boolean = false>(options: Options<AdminDeleteUserApiV1AdminUsersUserIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<AdminDeleteUserApiV1AdminUsersUserIdDeleteResponses, AdminDeleteUserApiV1AdminUsersUserIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/admin/users/{user_id}',
        ...options
    });
};

/**
 * Admin Get User
 * Admin endpoint for single user details
 */
export const adminGetUserApiV1AdminUsersUserIdGet = <ThrowOnError extends boolean = false>(options: Options<AdminGetUserApiV1AdminUsersUserIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AdminGetUserApiV1AdminUsersUserIdGetResponses, AdminGetUserApiV1AdminUsersUserIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/admin/users/{user_id}',
        ...options
    });
};

/**
 * Admin Update User
 * Admin endpoint to update user status and roles
 */
export const adminUpdateUserApiV1AdminUsersUserIdPut = <ThrowOnError extends boolean = false>(options: Options<AdminUpdateUserApiV1AdminUsersUserIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AdminUpdateUserApiV1AdminUsersUserIdPutResponses, AdminUpdateUserApiV1AdminUsersUserIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/admin/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Admin Toggle User Status
 * Admin endpoint to toggle user activation status
 */
export const adminToggleUserStatusApiV1AdminUsersUserIdStatusPost = <ThrowOnError extends boolean = false>(options: Options<AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostResponses, AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/admin/users/{user_id}/status',
        ...options
    });
};

/**
 * Admin Get Stats
 * Get user statistics for admin dashboard
 */
export const adminGetStatsApiV1AdminStatsGet = <ThrowOnError extends boolean = false>(options?: Options<AdminGetStatsApiV1AdminStatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminGetStatsApiV1AdminStatsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/admin/stats',
        ...options
    });
};

/**
 * Admin Get Recent Users
 * Get recent user registrations
 */
export const adminGetRecentUsersApiV1AdminRecentUsersGet = <ThrowOnError extends boolean = false>(options?: Options<AdminGetRecentUsersApiV1AdminRecentUsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminGetRecentUsersApiV1AdminRecentUsersGetResponses, AdminGetRecentUsersApiV1AdminRecentUsersGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/admin/recent-users',
        ...options
    });
};

/**
 * Admin Get Email Status
 * Admin endpoint for email service testing and status
 */
export const adminGetEmailStatusApiV1AdminEmailStatusGet = <ThrowOnError extends boolean = false>(options?: Options<AdminGetEmailStatusApiV1AdminEmailStatusGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AdminGetEmailStatusApiV1AdminEmailStatusGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/admin/email/status',
        ...options
    });
};

/**
 * Get My Profile
 * Get current user's profile
 */
export const getMyProfileApiV1UsersMeProfileGet = <ThrowOnError extends boolean = false>(options?: Options<GetMyProfileApiV1UsersMeProfileGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyProfileApiV1UsersMeProfileGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/profile',
        ...options
    });
};

/**
 * Update My Profile
 * Update current user's profile
 */
export const updateMyProfileApiV1UsersMeProfilePut = <ThrowOnError extends boolean = false>(options: Options<UpdateMyProfileApiV1UsersMeProfilePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMyProfileApiV1UsersMeProfilePutResponses, UpdateMyProfileApiV1UsersMeProfilePutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get User Profile
 * Get a user's profile (public profiles only unless own profile)
 */
export const getUserProfileApiV1UsersUserIdProfileGet = <ThrowOnError extends boolean = false>(options: Options<GetUserProfileApiV1UsersUserIdProfileGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserProfileApiV1UsersUserIdProfileGetResponses, GetUserProfileApiV1UsersUserIdProfileGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/{user_id}/profile',
        ...options
    });
};

/**
 * Delete Profile Picture
 * Delete profile picture
 */
export const deleteProfilePictureApiV1UsersMeProfilePictureDelete = <ThrowOnError extends boolean = false>(options?: Options<DeleteProfilePictureApiV1UsersMeProfilePictureDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteProfilePictureApiV1UsersMeProfilePictureDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/profile/picture',
        ...options
    });
};

/**
 * Upload Profile Picture
 * Upload profile picture
 */
export const uploadProfilePictureApiV1UsersMeProfilePicturePost = <ThrowOnError extends boolean = false>(options: Options<UploadProfilePictureApiV1UsersMeProfilePicturePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadProfilePictureApiV1UsersMeProfilePicturePostResponses, UploadProfilePictureApiV1UsersMeProfilePicturePostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/profile/picture',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Upload Avatar
 * Upload user avatar (alias for profile picture upload)
 */
export const uploadAvatarApiV1UsersMeAvatarPost = <ThrowOnError extends boolean = false>(options: Options<UploadAvatarApiV1UsersMeAvatarPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadAvatarApiV1UsersMeAvatarPostResponses, UploadAvatarApiV1UsersMeAvatarPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/users/me/avatar',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Test Storage Connection
 * Test storage connection
 */
export const testStorageConnectionApiV1StorageTestConnectionGet = <ThrowOnError extends boolean = false>(options?: Options<TestStorageConnectionApiV1StorageTestConnectionGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestStorageConnectionApiV1StorageTestConnectionGetResponses, unknown, ThrowOnError>({
        url: '/api/v1/storage/test-connection',
        ...options
    });
};

/**
 * Get Storage Profile
 * Get user's storage profile information
 */
export const getStorageProfileApiV1StorageProfileGet = <ThrowOnError extends boolean = false>(options?: Options<GetStorageProfileApiV1StorageProfileGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStorageProfileApiV1StorageProfileGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/storage/profile',
        ...options
    });
};

/**
 * Upload File
 * Upload a file to Dropbox storage
 *
 * - **file**: Upload file (multipart/form-data)
 * - **category**: File category for organization
 * - **slug**: Optional slug for organized paths
 */
export const uploadFileApiV1StorageUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadFileApiV1StorageUploadPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadFileApiV1StorageUploadPostResponses, UploadFileApiV1StorageUploadPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/storage/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List Files
 * List user's files
 */
export const listFilesApiV1StorageFilesGet = <ThrowOnError extends boolean = false>(options?: Options<ListFilesApiV1StorageFilesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFilesApiV1StorageFilesGetResponses, ListFilesApiV1StorageFilesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/storage/files',
        ...options
    });
};

/**
 * Delete File
 * Delete a file
 */
export const deleteFileApiV1StorageFilesFileIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteFileApiV1StorageFilesFileIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFileApiV1StorageFilesFileIdDeleteResponses, DeleteFileApiV1StorageFilesFileIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/storage/files/{file_id}',
        ...options
    });
};

/**
 * Get File Info
 * Get file information
 */
export const getFileInfoApiV1StorageFilesFileIdGet = <ThrowOnError extends boolean = false>(options: Options<GetFileInfoApiV1StorageFilesFileIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileInfoApiV1StorageFilesFileIdGetResponses, GetFileInfoApiV1StorageFilesFileIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/storage/files/{file_id}',
        ...options
    });
};

/**
 * Create Share Link
 * Create a sharing link for a file
 */
export const createShareLinkApiV1StorageFilesFileIdSharePost = <ThrowOnError extends boolean = false>(options: Options<CreateShareLinkApiV1StorageFilesFileIdSharePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateShareLinkApiV1StorageFilesFileIdSharePostResponses, CreateShareLinkApiV1StorageFilesFileIdSharePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/storage/files/{file_id}/share',
        ...options
    });
};

/**
 * Download File
 * Download a file
 */
export const downloadFileApiV1StorageFilesFileIdDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadFileApiV1StorageFilesFileIdDownloadGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadFileApiV1StorageFilesFileIdDownloadGetResponses, DownloadFileApiV1StorageFilesFileIdDownloadGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/storage/files/{file_id}/download',
        ...options
    });
};

/**
 * List Companies
 * List companies with pagination and filtering (admin only)
 */
export const listCompaniesApiV1ContactsCompaniesGet = <ThrowOnError extends boolean = false>(options?: Options<ListCompaniesApiV1ContactsCompaniesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCompaniesApiV1ContactsCompaniesGetResponses, ListCompaniesApiV1ContactsCompaniesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/companies',
        ...options
    });
};

/**
 * Create Company
 * Create a new company (admin only)
 */
export const createCompanyApiV1ContactsCompaniesPost = <ThrowOnError extends boolean = false>(options: Options<CreateCompanyApiV1ContactsCompaniesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCompanyApiV1ContactsCompaniesPostResponses, CreateCompanyApiV1ContactsCompaniesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/companies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Company
 * Delete company (admin only)
 */
export const deleteCompanyApiV1ContactsCompaniesCompanyIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteResponses, DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/companies/{company_id}',
        ...options
    });
};

/**
 * Get Company
 * Get company details (admin only)
 */
export const getCompanyApiV1ContactsCompaniesCompanyIdGet = <ThrowOnError extends boolean = false>(options: Options<GetCompanyApiV1ContactsCompaniesCompanyIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCompanyApiV1ContactsCompaniesCompanyIdGetResponses, GetCompanyApiV1ContactsCompaniesCompanyIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/companies/{company_id}',
        ...options
    });
};

/**
 * Update Company
 * Update company (admin only)
 */
export const updateCompanyApiV1ContactsCompaniesCompanyIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateCompanyApiV1ContactsCompaniesCompanyIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCompanyApiV1ContactsCompaniesCompanyIdPutResponses, UpdateCompanyApiV1ContactsCompaniesCompanyIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/companies/{company_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List People
 * List people with pagination and filtering (admin only)
 */
export const listPeopleApiV1ContactsPeopleGet = <ThrowOnError extends boolean = false>(options?: Options<ListPeopleApiV1ContactsPeopleGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPeopleApiV1ContactsPeopleGetResponses, ListPeopleApiV1ContactsPeopleGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/people',
        ...options
    });
};

/**
 * Create Person
 * Create a new person (admin only)
 */
export const createPersonApiV1ContactsPeoplePost = <ThrowOnError extends boolean = false>(options: Options<CreatePersonApiV1ContactsPeoplePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePersonApiV1ContactsPeoplePostResponses, CreatePersonApiV1ContactsPeoplePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/people',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Person
 * Delete person (admin only)
 */
export const deletePersonApiV1ContactsPeoplePersonIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeletePersonApiV1ContactsPeoplePersonIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePersonApiV1ContactsPeoplePersonIdDeleteResponses, DeletePersonApiV1ContactsPeoplePersonIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/people/{person_id}',
        ...options
    });
};

/**
 * Get Person
 * Get person details (admin only)
 */
export const getPersonApiV1ContactsPeoplePersonIdGet = <ThrowOnError extends boolean = false>(options: Options<GetPersonApiV1ContactsPeoplePersonIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPersonApiV1ContactsPeoplePersonIdGetResponses, GetPersonApiV1ContactsPeoplePersonIdGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/people/{person_id}',
        ...options
    });
};

/**
 * Update Person
 * Update person (admin only)
 */
export const updatePersonApiV1ContactsPeoplePersonIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdatePersonApiV1ContactsPeoplePersonIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePersonApiV1ContactsPeoplePersonIdPutResponses, UpdatePersonApiV1ContactsPeoplePersonIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/people/{person_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Company Profile
 * Update company profile (admin only)
 */
export const updateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePut = <ThrowOnError extends boolean = false>(options: Options<UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutResponses, UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/companies/{company_id}/profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update Person Profile
 * Update person profile (admin only)
 */
export const updatePersonProfileApiV1ContactsPeoplePersonIdProfilePut = <ThrowOnError extends boolean = false>(options: Options<UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutResponses, UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/people/{person_id}/profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Upload Profile Media
 * Upload media files to company or person profile (admin only)
 */
export const uploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostResponses, UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/profiles/{profile_type}/{profile_id}/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * List Profile Media
 * List media files for company or person profile (admin only)
 */
export const listProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGet = <ThrowOnError extends boolean = false>(options: Options<ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetResponses, ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/profiles/{profile_type}/{profile_id}/media',
        ...options
    });
};

/**
 * Delete Profile Media
 * Delete media file from company or person profile (admin only)
 */
export const deleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteResponses, DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/profiles/{profile_type}/{profile_id}/media/{file_id}',
        ...options
    });
};

/**
 * Download Profile Media
 * Get secure download URL for profile media file (admin only)
 */
export const downloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetResponses, DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/profiles/{profile_type}/{profile_id}/media/{file_id}/download',
        ...options
    });
};

/**
 * Get Profile Media Thumbnail
 * Get or generate thumbnail for profile media file (admin only)
 */
export const getProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGet = <ThrowOnError extends boolean = false>(options: Options<GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetResponses, GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/profiles/{profile_type}/{profile_id}/media/{file_id}/thumbnail',
        ...options
    });
};

/**
 * List Public Profile Media
 * List media files for public company or person profile (no auth required)
 */
export const listPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGet = <ThrowOnError extends boolean = false>(options: Options<ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetResponses, ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetErrors, ThrowOnError>({
        url: '/api/v1/contacts/public/profiles/{profile_type}/{slug}/media',
        ...options
    });
};

/**
 * Get Public Profile Media Thumbnail
 * Get thumbnail for public profile media file (no auth required)
 */
export const getPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGet = <ThrowOnError extends boolean = false>(options: Options<GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetResponses, GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetErrors, ThrowOnError>({
        url: '/api/v1/contacts/public/profiles/{profile_type}/{slug}/media/{file_id}/thumbnail',
        ...options
    });
};

/**
 * List Public Companies
 * List public companies with pagination and search (no auth required)
 */
export const listPublicCompaniesApiV1ContactsPublicCompaniesGet = <ThrowOnError extends boolean = false>(options?: Options<ListPublicCompaniesApiV1ContactsPublicCompaniesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPublicCompaniesApiV1ContactsPublicCompaniesGetResponses, ListPublicCompaniesApiV1ContactsPublicCompaniesGetErrors, ThrowOnError>({
        url: '/api/v1/contacts/public/companies',
        ...options
    });
};

/**
 * Get Public Company By Slug
 * Get public company profile by slug (no auth required)
 */
export const getPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetResponses, GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetErrors, ThrowOnError>({
        url: '/api/v1/contacts/public/companies/{slug}',
        ...options
    });
};

/**
 * List Public People
 * List public people with pagination and search (no auth required)
 */
export const listPublicPeopleApiV1ContactsPublicPeopleGet = <ThrowOnError extends boolean = false>(options?: Options<ListPublicPeopleApiV1ContactsPublicPeopleGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPublicPeopleApiV1ContactsPublicPeopleGetResponses, ListPublicPeopleApiV1ContactsPublicPeopleGetErrors, ThrowOnError>({
        url: '/api/v1/contacts/public/people',
        ...options
    });
};

/**
 * Get Public Person By Slug
 * Get public person profile by slug (no auth required)
 */
export const getPublicPersonBySlugApiV1ContactsPublicPeopleSlugGet = <ThrowOnError extends boolean = false>(options: Options<GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetResponses, GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetErrors, ThrowOnError>({
        url: '/api/v1/contacts/public/people/{slug}',
        ...options
    });
};

/**
 * List Associations
 * List all associations with filtering and pagination (admin only)
 */
export const listAssociationsApiV1ContactsAssociationsGet = <ThrowOnError extends boolean = false>(options?: Options<ListAssociationsApiV1ContactsAssociationsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAssociationsApiV1ContactsAssociationsGetResponses, ListAssociationsApiV1ContactsAssociationsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/associations',
        ...options
    });
};

/**
 * Create Association
 * Link company and person (admin only)
 */
export const createAssociationApiV1ContactsAssociationsPost = <ThrowOnError extends boolean = false>(options: Options<CreateAssociationApiV1ContactsAssociationsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAssociationApiV1ContactsAssociationsPostResponses, CreateAssociationApiV1ContactsAssociationsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/associations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Association
 * Unlink company and person (admin only)
 */
export const deleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteResponses, DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/associations/{company_id}/{person_id}',
        ...options
    });
};

/**
 * Update Association
 * Update association (admin only)
 */
export const updateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutResponses, UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/associations/{company_id}/{person_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Company People
 * Get people associated with company (admin only)
 */
export const getCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGet = <ThrowOnError extends boolean = false>(options: Options<GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetResponses, GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/companies/{company_id}/people',
        ...options
    });
};

/**
 * Get Person Companies
 * Get companies associated with person (admin only)
 */
export const getPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGet = <ThrowOnError extends boolean = false>(options: Options<GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetResponses, GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/contacts/people/{person_id}/companies',
        ...options
    });
};

/**
 * Get Tag Stats
 * Get tag usage statistics
 */
export const getTagStatsApiV1TagsStatsGet = <ThrowOnError extends boolean = false>(options?: Options<GetTagStatsApiV1TagsStatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagStatsApiV1TagsStatsGetResponses, unknown, ThrowOnError>({
        url: '/api/v1/tags/stats',
        ...options
    });
};

/**
 * Get Tag Cloud
 * Get tag cloud data for visualization
 */
export const getTagCloudApiV1TagsCloudGet = <ThrowOnError extends boolean = false>(options?: Options<GetTagCloudApiV1TagsCloudGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTagCloudApiV1TagsCloudGetResponses, GetTagCloudApiV1TagsCloudGetErrors, ThrowOnError>({
        url: '/api/v1/tags/cloud',
        ...options
    });
};

/**
 * Autocomplete Tags
 * Get tag suggestions with autocomplete
 */
export const autocompleteTagsApiV1TagsAutocompleteGet = <ThrowOnError extends boolean = false>(options: Options<AutocompleteTagsApiV1TagsAutocompleteGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AutocompleteTagsApiV1TagsAutocompleteGetResponses, AutocompleteTagsApiV1TagsAutocompleteGetErrors, ThrowOnError>({
        url: '/api/v1/tags/autocomplete',
        ...options
    });
};

/**
 * Get Object Tags
 * Get all tags for a specific object
 */
export const getObjectTagsApiV1TagsObjectTagsGet = <ThrowOnError extends boolean = false>(options: Options<GetObjectTagsApiV1TagsObjectTagsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetObjectTagsApiV1TagsObjectTagsGetResponses, GetObjectTagsApiV1TagsObjectTagsGetErrors, ThrowOnError>({
        url: '/api/v1/tags/object-tags',
        ...options
    });
};

/**
 * List Tags
 * List all tags with pagination and optional search
 */
export const listTagsApiV1TagsGet = <ThrowOnError extends boolean = false>(options?: Options<ListTagsApiV1TagsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTagsApiV1TagsGetResponses, ListTagsApiV1TagsGetErrors, ThrowOnError>({
        url: '/api/v1/tags',
        ...options
    });
};

/**
 * Create Tag
 * Create a new tag (admin only)
 */
export const createTagApiV1TagsPost = <ThrowOnError extends boolean = false>(options: Options<CreateTagApiV1TagsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTagApiV1TagsPostResponses, CreateTagApiV1TagsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Tag
 * Delete a tag and all its associations (admin only)
 */
export const deleteTagApiV1TagsTagIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteTagApiV1TagsTagIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteTagApiV1TagsTagIdDeleteResponses, DeleteTagApiV1TagsTagIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tags/{tag_id}',
        ...options
    });
};

/**
 * Get Tag
 * Get a single tag by ID
 */
export const getTagApiV1TagsTagIdGet = <ThrowOnError extends boolean = false>(options: Options<GetTagApiV1TagsTagIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTagApiV1TagsTagIdGetResponses, GetTagApiV1TagsTagIdGetErrors, ThrowOnError>({
        url: '/api/v1/tags/{tag_id}',
        ...options
    });
};

/**
 * Update Tag
 * Update an existing tag (admin only)
 */
export const updateTagApiV1TagsTagIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateTagApiV1TagsTagIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTagApiV1TagsTagIdPutResponses, UpdateTagApiV1TagsTagIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tags/{tag_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Tag Object
 * Add tags to an object
 */
export const tagObjectApiV1TagsTagObjectPost = <ThrowOnError extends boolean = false>(options: Options<TagObjectApiV1TagsTagObjectPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TagObjectApiV1TagsTagObjectPostResponses, TagObjectApiV1TagsTagObjectPostErrors, ThrowOnError>({
        url: '/api/v1/tags/tag-object',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Untag Object
 * Remove tags from an object
 */
export const untagObjectApiV1TagsUntagObjectDelete = <ThrowOnError extends boolean = false>(options: Options<UntagObjectApiV1TagsUntagObjectDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UntagObjectApiV1TagsUntagObjectDeleteResponses, UntagObjectApiV1TagsUntagObjectDeleteErrors, ThrowOnError>({
        url: '/api/v1/tags/untag-object',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Tagged Objects
 * Get all objects tagged with a specific tag
 */
export const getTaggedObjectsApiV1TagsTagSlugObjectsGet = <ThrowOnError extends boolean = false>(options: Options<GetTaggedObjectsApiV1TagsTagSlugObjectsGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTaggedObjectsApiV1TagsTagSlugObjectsGetResponses, GetTaggedObjectsApiV1TagsTagSlugObjectsGetErrors, ThrowOnError>({
        url: '/api/v1/tags/{tag_slug}/objects',
        ...options
    });
};

/**
 * Get Related Tags
 * Get tags commonly used together with the specified tag
 */
export const getRelatedTagsApiV1TagsTagSlugRelatedGet = <ThrowOnError extends boolean = false>(options: Options<GetRelatedTagsApiV1TagsTagSlugRelatedGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRelatedTagsApiV1TagsTagSlugRelatedGetResponses, GetRelatedTagsApiV1TagsTagSlugRelatedGetErrors, ThrowOnError>({
        url: '/api/v1/tags/{tag_slug}/related',
        ...options
    });
};

/**
 * Bulk Create Tags
 * Create multiple tags at once (admin only)
 */
export const bulkCreateTagsApiV1TagsBulkCreatePost = <ThrowOnError extends boolean = false>(options: Options<BulkCreateTagsApiV1TagsBulkCreatePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BulkCreateTagsApiV1TagsBulkCreatePostResponses, BulkCreateTagsApiV1TagsBulkCreatePostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tags/bulk-create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Bulk Delete Tags
 * Delete multiple tags at once (admin only)
 */
export const bulkDeleteTagsApiV1TagsBulkDeleteDelete = <ThrowOnError extends boolean = false>(options: Options<BulkDeleteTagsApiV1TagsBulkDeleteDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BulkDeleteTagsApiV1TagsBulkDeleteDeleteResponses, BulkDeleteTagsApiV1TagsBulkDeleteDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/tags/bulk-delete',
        ...options
    });
};

/**
 * List Images
 */
export const listImagesApiV1ImagesGet = <ThrowOnError extends boolean = false>(options?: Options<ListImagesApiV1ImagesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListImagesApiV1ImagesGetResponses, ListImagesApiV1ImagesGetErrors, ThrowOnError>({
        url: '/api/v1/images',
        ...options
    });
};

/**
 * Create Image
 */
export const createImageApiV1ImagesPost = <ThrowOnError extends boolean = false>(options: Options<CreateImageApiV1ImagesPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateImageApiV1ImagesPostResponses, CreateImageApiV1ImagesPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/images',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Image
 */
export const deleteImageApiV1ImagesImageIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteImageApiV1ImagesImageIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteImageApiV1ImagesImageIdDeleteResponses, DeleteImageApiV1ImagesImageIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/images/{image_id}',
        ...options
    });
};

/**
 * Get Image
 */
export const getImageApiV1ImagesImageIdGet = <ThrowOnError extends boolean = false>(options: Options<GetImageApiV1ImagesImageIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetImageApiV1ImagesImageIdGetResponses, GetImageApiV1ImagesImageIdGetErrors, ThrowOnError>({
        url: '/api/v1/images/{image_id}',
        ...options
    });
};

/**
 * Update Image
 */
export const updateImageApiV1ImagesImageIdPut = <ThrowOnError extends boolean = false>(options: Options<UpdateImageApiV1ImagesImageIdPutData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateImageApiV1ImagesImageIdPutResponses, UpdateImageApiV1ImagesImageIdPutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/images/{image_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Bulk Upload Images
 * Bulk upload multiple images
 */
export const bulkUploadImagesApiV1ImagesBulkUploadPost = <ThrowOnError extends boolean = false>(options: Options<BulkUploadImagesApiV1ImagesBulkUploadPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BulkUploadImagesApiV1ImagesBulkUploadPostResponses, BulkUploadImagesApiV1ImagesBulkUploadPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/images/bulk-upload',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Bulk Tag Images
 * Bulk tag multiple images - admin only
 */
export const bulkTagImagesApiV1ImagesBulkTagPost = <ThrowOnError extends boolean = false>(options: Options<BulkTagImagesApiV1ImagesBulkTagPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BulkTagImagesApiV1ImagesBulkTagPostResponses, BulkTagImagesApiV1ImagesBulkTagPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/images/bulk-tag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Regenerate Thumbnails
 * Regenerate thumbnails for an image
 */
export const regenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPost = <ThrowOnError extends boolean = false>(options: Options<RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostResponses, RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/images/{image_id}/regenerate-thumbnails',
        ...options
    });
};

/**
 * Get Image Metadata
 * Get comprehensive metadata for an image
 */
export const getImageMetadataApiV1ImagesImageIdMetadataGet = <ThrowOnError extends boolean = false>(options: Options<GetImageMetadataApiV1ImagesImageIdMetadataGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetImageMetadataApiV1ImagesImageIdMetadataGetResponses, GetImageMetadataApiV1ImagesImageIdMetadataGetErrors, ThrowOnError>({
        url: '/api/v1/images/{image_id}/metadata',
        ...options
    });
};

/**
 * Get Image Stats
 */
export const getImageStatsApiV1ImagesAdminStatsGet = <ThrowOnError extends boolean = false>(options?: Options<GetImageStatsApiV1ImagesAdminStatsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetImageStatsApiV1ImagesAdminStatsGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/images/admin/stats',
        ...options
    });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};