// This file is auto-generated by @hey-api/openapi-ts

/**
 * Body_bulk_tag_images_api_v1_images_bulk_tag_post
 */
export type BodyBulkTagImagesApiV1ImagesBulkTagPost = {
    /**
     * Image Ids
     */
    image_ids: Array<number>;
    /**
     * Tag Names
     */
    tag_names: Array<string>;
};

/**
 * Body_login_api_v1_auth_login_post
 */
export type BodyLoginApiV1AuthLoginPost = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * Body_upload_avatar_api_v1_users_me_avatar_post
 */
export type BodyUploadAvatarApiV1UsersMeAvatarPost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Body_upload_document_api_v1_cases__case_id__documents_upload_post
 */
export type BodyUploadDocumentApiV1CasesCaseIdDocumentsUploadPost = {
    /**
     * File
     */
    file: Blob | File;
    /**
     * Event Id
     */
    event_id?: number | null;
    /**
     * Party Type
     */
    party_type: string;
    /**
     * Document Type
     */
    document_type: string;
    /**
     * Document Date
     */
    document_date: string;
};

/**
 * Body_upload_file_api_v1_storage_upload_post
 */
export type BodyUploadFileApiV1StorageUploadPost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Body_upload_profile_media_api_v1_contacts_profiles__profile_type___profile_id__upload_post
 */
export type BodyUploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * Body_upload_profile_picture_api_v1_users_me_profile_picture_post
 */
export type BodyUploadProfilePictureApiV1UsersMeProfilePicturePost = {
    /**
     * File
     */
    file: Blob | File;
};

/**
 * BulkConnectionStatus
 * Schema for bulk connection status
 */
export type BulkConnectionStatus = {
    /**
     * User Id
     */
    user_id: number;
    /**
     * Total Connections
     */
    total_connections: number;
    /**
     * Active Connections
     */
    active_connections: number;
    /**
     * Expired Connections
     */
    expired_connections: number;
    /**
     * Error Connections
     */
    error_connections: number;
    /**
     * Connections
     */
    connections: Array<ConnectionStatus>;
};

/**
 * BulkTagRequest
 * Schema for bulk tag operations
 */
export type BulkTagRequest = {
    /**
     * Tag Names
     * List of tag names
     */
    tag_names: Array<string>;
};

/**
 * BulkTagResponse
 * Schema for bulk tag operation results
 */
export type BulkTagResponse = {
    /**
     * Created Tags
     */
    created_tags: Array<TagResponse>;
    /**
     * Existing Tags
     */
    existing_tags: Array<TagResponse>;
    /**
     * Failed Tags
     * Tag names that failed to create
     */
    failed_tags?: Array<string>;
};

/**
 * CaseCreate
 */
export type CaseCreate = {
    /**
     * Title
     */
    title: string;
    case_type: CaseType;
    /**
     * Court Location
     */
    court_location: string;
    /**
     * Opposing Party
     */
    opposing_party: string;
    status?: CaseStatus;
    /**
     * Court File Number
     */
    court_file_number: string;
};

/**
 * CaseDashboard
 */
export type CaseDashboard = {
    /**
     * Total Cases
     */
    total_cases: number;
    /**
     * Active Cases
     */
    active_cases: number;
    /**
     * Upcoming Events
     */
    upcoming_events: number;
    /**
     * Overdue Services
     */
    overdue_services: number;
    /**
     * Urgent Notes
     */
    urgent_notes: number;
    /**
     * Recent Cases
     */
    recent_cases: Array<CaseSummary>;
};

/**
 * CaseDocumentResponse
 */
export type CaseDocumentResponse = {
    /**
     * Original Filename
     */
    original_filename: string;
    party_type: PartyType;
    document_type: DocumentType;
    /**
     * Document Date
     */
    document_date: string;
    /**
     * File Size
     */
    file_size: number;
    /**
     * Mime Type
     */
    mime_type: string;
    /**
     * Id
     */
    id: number;
    /**
     * Case Id
     */
    case_id: number;
    /**
     * Event Id
     */
    event_id?: number | null;
    /**
     * Stored Filename
     */
    stored_filename: string;
    /**
     * File Path
     */
    file_path: string;
    /**
     * Smart Text Id
     */
    smart_text_id?: number | null;
    /**
     * Uploaded At
     */
    uploaded_at: string;
};

/**
 * CaseFullResponse
 */
export type CaseFullResponse = {
    /**
     * Title
     */
    title: string;
    case_type: CaseType;
    /**
     * Court Location
     */
    court_location: string;
    /**
     * Opposing Party
     */
    opposing_party: string;
    status?: CaseStatus;
    /**
     * Id
     */
    id: number;
    /**
     * Court File Number
     */
    court_file_number: string;
    /**
     * User Id
     */
    user_id: number;
    profile?: CaseProfileResponse | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Events
     */
    events?: Array<CourtEventResponse>;
    /**
     * Documents
     */
    documents?: Array<CaseDocumentResponse>;
    /**
     * Notes
     */
    notes?: Array<CaseNoteResponse>;
};

/**
 * CaseNoteCreate
 */
export type CaseNoteCreate = {
    note_type: NoteType;
    /**
     * Title
     */
    title: string;
    /**
     * Content
     */
    content?: string | null;
    /**
     * Tiptap Content
     */
    tiptap_content?: {
        [key: string]: unknown;
    } | null;
    priority?: NotePriority;
    /**
     * Is Confidential
     */
    is_confidential?: boolean;
    /**
     * Event Id
     */
    event_id?: number | null;
    /**
     * Document Id
     */
    document_id?: number | null;
    /**
     * Service Id
     */
    service_id?: number | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Reminder Date
     */
    reminder_date?: string | null;
    /**
     * Is Completed
     */
    is_completed?: boolean;
    /**
     * Case Id
     */
    case_id: number;
};

/**
 * CaseNoteResponse
 */
export type CaseNoteResponse = {
    note_type: NoteType;
    /**
     * Title
     */
    title: string;
    /**
     * Content
     */
    content?: string | null;
    /**
     * Tiptap Content
     */
    tiptap_content?: {
        [key: string]: unknown;
    } | null;
    priority?: NotePriority;
    /**
     * Is Confidential
     */
    is_confidential?: boolean;
    /**
     * Event Id
     */
    event_id?: number | null;
    /**
     * Document Id
     */
    document_id?: number | null;
    /**
     * Service Id
     */
    service_id?: number | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Reminder Date
     */
    reminder_date?: string | null;
    /**
     * Is Completed
     */
    is_completed?: boolean;
    /**
     * Id
     */
    id: number;
    /**
     * Case Id
     */
    case_id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * CaseNoteUpdate
 */
export type CaseNoteUpdate = {
    note_type?: NoteType | null;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Content
     */
    content?: string | null;
    /**
     * Tiptap Content
     */
    tiptap_content?: {
        [key: string]: unknown;
    } | null;
    priority?: NotePriority | null;
    /**
     * Is Confidential
     */
    is_confidential?: boolean | null;
    /**
     * Event Id
     */
    event_id?: number | null;
    /**
     * Document Id
     */
    document_id?: number | null;
    /**
     * Service Id
     */
    service_id?: number | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Reminder Date
     */
    reminder_date?: string | null;
    /**
     * Is Completed
     */
    is_completed?: boolean | null;
};

/**
 * CaseProfileCreate
 */
export type CaseProfileCreate = {
    /**
     * Case History
     */
    case_history?: string | null;
    /**
     * Key Issues
     */
    key_issues?: string | null;
    /**
     * Opposing Counsel
     */
    opposing_counsel?: {
        [key: string]: unknown;
    } | null;
    /**
     * Case Strategy
     */
    case_strategy?: string | null;
    /**
     * Important Dates
     */
    important_dates?: Array<{
        [key: string]: unknown;
    }> | null;
    /**
     * Settlement Discussions
     */
    settlement_discussions?: string | null;
    /**
     * Is Public
     */
    is_public?: boolean;
};

/**
 * CaseProfileResponse
 */
export type CaseProfileResponse = {
    /**
     * Case History
     */
    case_history?: string | null;
    /**
     * Key Issues
     */
    key_issues?: string | null;
    /**
     * Opposing Counsel
     */
    opposing_counsel?: {
        [key: string]: unknown;
    } | null;
    /**
     * Case Strategy
     */
    case_strategy?: string | null;
    /**
     * Important Dates
     */
    important_dates?: Array<{
        [key: string]: unknown;
    }> | null;
    /**
     * Settlement Discussions
     */
    settlement_discussions?: string | null;
    /**
     * Is Public
     */
    is_public?: boolean;
    /**
     * Id
     */
    id: number;
    /**
     * Case Id
     */
    case_id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * CaseStatus
 */
export type CaseStatus = 'active' | 'closed' | 'on_hold';

/**
 * CaseSummary
 */
export type CaseSummary = {
    /**
     * Id
     */
    id: number;
    /**
     * Court File Number
     */
    court_file_number: string;
    /**
     * Title
     */
    title: string;
    case_type: CaseType;
    status: CaseStatus;
    /**
     * Upcoming Events
     */
    upcoming_events: number;
    /**
     * Pending Services
     */
    pending_services: number;
    /**
     * Urgent Notes
     */
    urgent_notes: number;
    /**
     * Last Activity
     */
    last_activity?: string | null;
};

/**
 * CaseType
 */
export type CaseType = 'custody' | 'access' | 'support' | 'property' | 'divorce' | 'separation' | 'adoption' | 'child_protection' | 'other';

/**
 * CaseUpdate
 */
export type CaseUpdate = {
    /**
     * Title
     */
    title?: string | null;
    case_type?: CaseType | null;
    /**
     * Court Location
     */
    court_location?: string | null;
    /**
     * Opposing Party
     */
    opposing_party?: string | null;
    status?: CaseStatus | null;
};

/**
 * CaseWithProfileResponse
 */
export type CaseWithProfileResponse = {
    /**
     * Title
     */
    title: string;
    case_type: CaseType;
    /**
     * Court Location
     */
    court_location: string;
    /**
     * Opposing Party
     */
    opposing_party: string;
    status?: CaseStatus;
    /**
     * Id
     */
    id: number;
    /**
     * Court File Number
     */
    court_file_number: string;
    /**
     * User Id
     */
    user_id: number;
    profile?: CaseProfileResponse | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * CompanyCreate
 */
export type CompanyCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    /**
     * Website
     */
    website?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Public
     */
    is_public?: boolean;
};

/**
 * CompanyPersonAssociationCreate
 */
export type CompanyPersonAssociationCreate = {
    /**
     * Role
     */
    role?: string | null;
    /**
     * Start Date
     */
    start_date?: string | null;
    /**
     * End Date
     */
    end_date?: string | null;
    /**
     * Is Primary
     */
    is_primary?: boolean;
    /**
     * Company Id
     */
    company_id: number;
    /**
     * Person Id
     */
    person_id: number;
};

/**
 * CompanyPersonAssociationResponse
 */
export type CompanyPersonAssociationResponse = {
    /**
     * Role
     */
    role?: string | null;
    /**
     * Start Date
     */
    start_date?: string | null;
    /**
     * End Date
     */
    end_date?: string | null;
    /**
     * Is Primary
     */
    is_primary?: boolean;
    /**
     * Company Id
     */
    company_id: number;
    /**
     * Person Id
     */
    person_id: number;
    company?: CompanyResponse | null;
    person?: PersonResponse | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * CompanyPersonAssociationUpdate
 */
export type CompanyPersonAssociationUpdate = {
    /**
     * Role
     */
    role?: string | null;
    /**
     * Start Date
     */
    start_date?: string | null;
    /**
     * End Date
     */
    end_date?: string | null;
    /**
     * Is Primary
     */
    is_primary?: boolean;
};

/**
 * CompanyProfileResponse
 */
export type CompanyProfileResponse = {
    /**
     * Description
     */
    description?: string | null;
    /**
     * Industry
     */
    industry?: string | null;
    /**
     * Size
     */
    size?: string | null;
    /**
     * Founded Year
     */
    founded_year?: number | null;
    /**
     * Address
     */
    address?: {
        [key: string]: unknown;
    } | null;
    /**
     * Social Links
     */
    social_links?: {
        [key: string]: string;
    } | null;
    /**
     * Is Public
     */
    is_public?: boolean;
    /**
     * Id
     */
    id: number;
    /**
     * Company Id
     */
    company_id: number;
    /**
     * Logo File Id
     */
    logo_file_id?: number | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * CompanyProfileUpdate
 */
export type CompanyProfileUpdate = {
    /**
     * Description
     */
    description?: string | null;
    /**
     * Industry
     */
    industry?: string | null;
    /**
     * Size
     */
    size?: string | null;
    /**
     * Founded Year
     */
    founded_year?: number | null;
    /**
     * Address
     */
    address?: {
        [key: string]: unknown;
    } | null;
    /**
     * Social Links
     */
    social_links?: {
        [key: string]: string;
    } | null;
    /**
     * Is Public
     */
    is_public?: boolean | null;
};

/**
 * CompanyResponse
 */
export type CompanyResponse = {
    /**
     * Name
     */
    name: string;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    /**
     * Website
     */
    website?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Public
     */
    is_public?: boolean;
    /**
     * Id
     */
    id: number;
    /**
     * Slug
     */
    slug: string;
    profile?: CompanyProfileResponse | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * CompanyUpdate
 */
export type CompanyUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    /**
     * Website
     */
    website?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Is Public
     */
    is_public?: boolean | null;
};

/**
 * ConnectionDeleteResponse
 * Schema for connection deletion response
 */
export type ConnectionDeleteResponse = {
    /**
     * Message
     */
    message: string;
    /**
     * Connection Id
     */
    connection_id: number;
    /**
     * Email Address
     */
    email_address: string;
};

/**
 * ConnectionHealthCheck
 * Schema for connection health check results
 */
export type ConnectionHealthCheck = {
    /**
     * Connection Id
     */
    connection_id: number;
    /**
     * Is Healthy
     */
    is_healthy: boolean;
    /**
     * Status
     */
    status: string;
    /**
     * Last Checked
     */
    last_checked: string;
    /**
     * Error Details
     */
    error_details?: string | null;
    /**
     * Token Expires At
     */
    token_expires_at?: string | null;
    /**
     * Needs Reauth
     */
    needs_reauth?: boolean;
};

/**
 * ConnectionListResponse
 * Schema for listing user connections
 */
export type ConnectionListResponse = {
    /**
     * Connections
     */
    connections: Array<EmailConnectionResponse>;
    /**
     * Total
     */
    total: number;
    /**
     * Active
     */
    active: number;
    /**
     * Expired
     */
    expired: number;
    /**
     * Error
     */
    error: number;
};

/**
 * ConnectionStatus
 * Schema for connection status information
 */
export type ConnectionStatus = {
    /**
     * Connection Id
     */
    connection_id: number;
    /**
     * Email Address
     */
    email_address: string;
    /**
     * Status
     */
    status: string;
    /**
     * Is Active
     */
    is_active: boolean;
    /**
     * Is Expired
     */
    is_expired: boolean;
    /**
     * Last Sync At
     */
    last_sync_at?: string | null;
    /**
     * Error Message
     */
    error_message?: string | null;
};

/**
 * CourtEventCreate
 */
export type CourtEventCreate = {
    event_type: EventType;
    /**
     * Title
     */
    title: string;
    /**
     * Scheduled Date
     */
    scheduled_date?: string | null;
    /**
     * Courtroom
     */
    courtroom?: string | null;
    /**
     * Judge
     */
    judge?: string | null;
    status?: EventStatus;
    /**
     * Outcome
     */
    outcome?: string | null;
    /**
     * Event Metadata
     */
    event_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Case Id
     */
    case_id: number;
    event_category?: EventCategory | null;
};

/**
 * CourtEventResponse
 */
export type CourtEventResponse = {
    event_type: EventType;
    /**
     * Title
     */
    title: string;
    /**
     * Scheduled Date
     */
    scheduled_date?: string | null;
    /**
     * Courtroom
     */
    courtroom?: string | null;
    /**
     * Judge
     */
    judge?: string | null;
    status?: EventStatus;
    /**
     * Outcome
     */
    outcome?: string | null;
    /**
     * Event Metadata
     */
    event_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * Id
     */
    id: number;
    /**
     * Case Id
     */
    case_id: number;
    event_category: EventCategory;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * CourtEventUpdate
 */
export type CourtEventUpdate = {
    event_type?: EventType | null;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Scheduled Date
     */
    scheduled_date?: string | null;
    /**
     * Courtroom
     */
    courtroom?: string | null;
    /**
     * Judge
     */
    judge?: string | null;
    status?: EventStatus | null;
    /**
     * Outcome
     */
    outcome?: string | null;
    /**
     * Event Metadata
     */
    event_metadata?: {
        [key: string]: unknown;
    } | null;
};

/**
 * DocumentServiceCreate
 */
export type DocumentServiceCreate = {
    service_type: ServiceType;
    /**
     * Service Date
     */
    service_date: string;
    /**
     * Served On
     */
    served_on: string;
    /**
     * Service Address
     */
    service_address?: {
        [key: string]: string;
    } | null;
    /**
     * Received Date
     */
    received_date?: string | null;
    /**
     * Receipt Method
     */
    receipt_method?: string | null;
    service_status?: ServiceStatus;
    /**
     * Service Notes
     */
    service_notes?: string | null;
    /**
     * Attempts
     */
    attempts?: Array<{
        [key: string]: unknown;
    }> | null;
    /**
     * Affidavit Of Service Id
     */
    affidavit_of_service_id?: number | null;
    /**
     * Days For Response
     */
    days_for_response?: number | null;
    /**
     * Response Deadline
     */
    response_deadline?: string | null;
    /**
     * Is Urgent
     */
    is_urgent?: boolean;
    /**
     * Court Ordered Service
     */
    court_ordered_service?: boolean;
    /**
     * Document Id
     */
    document_id: number;
};

/**
 * DocumentServiceResponse
 */
export type DocumentServiceResponse = {
    service_type: ServiceType;
    /**
     * Service Date
     */
    service_date: string;
    /**
     * Served On
     */
    served_on: string;
    /**
     * Service Address
     */
    service_address?: {
        [key: string]: string;
    } | null;
    /**
     * Received Date
     */
    received_date?: string | null;
    /**
     * Receipt Method
     */
    receipt_method?: string | null;
    service_status?: ServiceStatus;
    /**
     * Service Notes
     */
    service_notes?: string | null;
    /**
     * Attempts
     */
    attempts?: Array<{
        [key: string]: unknown;
    }> | null;
    /**
     * Affidavit Of Service Id
     */
    affidavit_of_service_id?: number | null;
    /**
     * Days For Response
     */
    days_for_response?: number | null;
    /**
     * Response Deadline
     */
    response_deadline?: string | null;
    /**
     * Is Urgent
     */
    is_urgent?: boolean;
    /**
     * Court Ordered Service
     */
    court_ordered_service?: boolean;
    /**
     * Id
     */
    id: number;
    /**
     * Document Id
     */
    document_id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * DocumentServiceUpdate
 */
export type DocumentServiceUpdate = {
    service_type?: ServiceType | null;
    /**
     * Service Date
     */
    service_date?: string | null;
    /**
     * Served On
     */
    served_on?: string | null;
    /**
     * Service Address
     */
    service_address?: {
        [key: string]: string;
    } | null;
    /**
     * Received Date
     */
    received_date?: string | null;
    /**
     * Receipt Method
     */
    receipt_method?: string | null;
    service_status?: ServiceStatus | null;
    /**
     * Service Notes
     */
    service_notes?: string | null;
    /**
     * Attempts
     */
    attempts?: Array<{
        [key: string]: unknown;
    }> | null;
    /**
     * Affidavit Of Service Id
     */
    affidavit_of_service_id?: number | null;
    /**
     * Days For Response
     */
    days_for_response?: number | null;
    /**
     * Response Deadline
     */
    response_deadline?: string | null;
    /**
     * Is Urgent
     */
    is_urgent?: boolean | null;
    /**
     * Court Ordered Service
     */
    court_ordered_service?: boolean | null;
};

/**
 * DocumentSmartTextCreate
 */
export type DocumentSmartTextCreate = {
    /**
     * Tiptap Content
     */
    tiptap_content: {
        [key: string]: unknown;
    };
    /**
     * Plain Text
     */
    plain_text: string;
    /**
     * Extraction Method
     */
    extraction_method: string;
    /**
     * Confidence Score
     */
    confidence_score?: number | null;
    /**
     * Document Id
     */
    document_id: number;
};

/**
 * DocumentSmartTextResponse
 */
export type DocumentSmartTextResponse = {
    /**
     * Tiptap Content
     */
    tiptap_content: {
        [key: string]: unknown;
    };
    /**
     * Plain Text
     */
    plain_text: string;
    /**
     * Extraction Method
     */
    extraction_method: string;
    /**
     * Confidence Score
     */
    confidence_score?: number | null;
    /**
     * Id
     */
    id: number;
    /**
     * Document Id
     */
    document_id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * DocumentSmartTextUpdate
 */
export type DocumentSmartTextUpdate = {
    /**
     * Tiptap Content
     */
    tiptap_content?: {
        [key: string]: unknown;
    } | null;
    /**
     * Plain Text
     */
    plain_text?: string | null;
    /**
     * Extraction Method
     */
    extraction_method?: string | null;
    /**
     * Confidence Score
     */
    confidence_score?: number | null;
};

/**
 * DocumentType
 */
export type DocumentType = 'affidavit' | 'financial_statement' | 'correspondence' | 'court_order' | 'notice_of_motion' | 'case_conference_brief' | 'settlement_conference_brief' | 'trial_record' | 'evidence' | 'other';

/**
 * EmailConnectionResponse
 * Schema for email connection responses
 */
export type EmailConnectionResponse = {
    /**
     * Email Address
     * Email address of the connected account
     */
    email_address: string;
    /**
     * Provider
     * OAuth provider (currently only 'google' is supported)
     */
    provider?: string;
    /**
     * Connection Name
     * User-friendly name for the connection
     */
    connection_name?: string | null;
    /**
     * Id
     */
    id: number;
    /**
     * User Id
     */
    user_id: number;
    /**
     * Provider Account Id
     */
    provider_account_id: string;
    /**
     * Connection Status
     */
    connection_status: string;
    /**
     * Last Sync At
     */
    last_sync_at?: string | null;
    /**
     * Error Message
     */
    error_message?: string | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Scopes Granted
     */
    scopes_granted: Array<string>;
};

/**
 * EmailConnectionUpdate
 * Schema for updating an email connection
 */
export type EmailConnectionUpdate = {
    /**
     * Connection Name
     */
    connection_name?: string | null;
    /**
     * Connection Status
     */
    connection_status?: string | null;
};

/**
 * EmailVerification
 */
export type EmailVerification = {
    /**
     * Token
     */
    token: string;
};

/**
 * EventCategory
 */
export type EventCategory = 'conference' | 'motion' | 'trial' | 'hearing' | 'administrative';

/**
 * EventStatus
 */
export type EventStatus = 'scheduled' | 'completed' | 'adjourned' | 'cancelled' | 'rescheduled';

/**
 * EventType
 */
export type EventType = 'case_conference' | 'settlement_conference' | 'trial_management_conference' | 'regular_motion' | 'urgent_motion' | 'emergency_motion' | 'trial' | 'summary_judgment_motion' | 'show_cause_hearing' | 'enforcement_hearing' | 'status_review' | 'uncontested_hearing' | 'first_appearance' | 'scheduling_conference';

/**
 * FileInfo
 */
export type FileInfo = {
    /**
     * Id
     */
    id: number;
    /**
     * Filename
     */
    filename: string;
    /**
     * Original Filename
     */
    original_filename: string;
    /**
     * File Size
     */
    file_size: number;
    /**
     * Content Type
     */
    content_type: string;
    /**
     * Uploaded At
     */
    uploaded_at: string;
    /**
     * Dropbox Path
     */
    dropbox_path?: string | null;
    /**
     * Sharing Url
     */
    sharing_url?: string | null;
};

/**
 * FileListResponse
 */
export type FileListResponse = {
    /**
     * Files
     */
    files: Array<FileInfo>;
    /**
     * Total
     */
    total: number;
    /**
     * Page
     */
    page: number;
    /**
     * Per Page
     */
    per_page: number;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * ImageCreate
 */
export type ImageCreate = {
    /**
     * Title
     */
    title: string;
    /**
     * Alt Text
     */
    alt_text?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Stored File Id
     */
    stored_file_id: number;
};

/**
 * ImageResponse
 */
export type ImageResponse = {
    /**
     * Title
     */
    title: string;
    /**
     * Alt Text
     */
    alt_text?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
    /**
     * Id
     */
    id: number;
    /**
     * Stored File Id
     */
    stored_file_id: number;
    /**
     * Width
     */
    width?: number | null;
    /**
     * Height
     */
    height?: number | null;
    /**
     * Thumbnail Sm Id
     */
    thumbnail_sm_id?: number | null;
    /**
     * Thumbnail Md Id
     */
    thumbnail_md_id?: number | null;
    /**
     * Thumbnail Lg Id
     */
    thumbnail_lg_id?: number | null;
    /**
     * User Profile Id
     */
    user_profile_id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Tag Objects
     */
    tag_objects?: Array<TagResponse> | null;
    /**
     * Cloudfront Url
     */
    cloudfront_url?: string | null;
    /**
     * Thumbnail Sm Url
     */
    thumbnail_sm_url?: string | null;
    /**
     * Thumbnail Md Url
     */
    thumbnail_md_url?: string | null;
    /**
     * Thumbnail Lg Url
     */
    thumbnail_lg_url?: string | null;
};

/**
 * ImageUpdate
 */
export type ImageUpdate = {
    /**
     * Title
     */
    title?: string | null;
    /**
     * Alt Text
     */
    alt_text?: string | null;
    /**
     * Description
     */
    description?: string | null;
    /**
     * Tags
     */
    tags?: Array<string> | null;
};

/**
 * MarriageChildrenCreate
 */
export type MarriageChildrenCreate = {
    /**
     * Marriage Id
     */
    marriage_id: number;
    /**
     * Child Id
     */
    child_id: number;
    /**
     * Custody Status
     */
    custody_status: string;
    /**
     * Custody Details
     */
    custody_details?: string | null;
    /**
     * Current Living With
     */
    current_living_with: string;
    /**
     * Custody Arrangement File Id
     */
    custody_arrangement_file_id?: number | null;
};

/**
 * MarriageChildrenResponse
 */
export type MarriageChildrenResponse = {
    /**
     * Marriage Id
     */
    marriage_id: number;
    /**
     * Child Id
     */
    child_id: number;
    /**
     * Custody Status
     */
    custody_status: string;
    /**
     * Custody Details
     */
    custody_details?: string | null;
    /**
     * Current Living With
     */
    current_living_with: string;
    /**
     * Custody Arrangement File Id
     */
    custody_arrangement_file_id?: number | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * MarriageChildrenUpdate
 */
export type MarriageChildrenUpdate = {
    /**
     * Custody Status
     */
    custody_status?: string | null;
    /**
     * Custody Details
     */
    custody_details?: string | null;
    /**
     * Current Living With
     */
    current_living_with?: string | null;
    /**
     * Custody Arrangement File Id
     */
    custody_arrangement_file_id?: number | null;
};

/**
 * MarriageCreate
 */
export type MarriageCreate = {
    /**
     * Person Id
     */
    person_id: number;
    /**
     * Spouse Id
     */
    spouse_id: number;
    /**
     * Marriage Date
     */
    marriage_date: string;
    /**
     * Marriage Location
     */
    marriage_location?: {
        [key: string]: unknown;
    } | null;
    /**
     * Separation Date
     */
    separation_date?: string | null;
    /**
     * Divorce Date
     */
    divorce_date?: string | null;
    /**
     * Current Status
     */
    current_status: string;
    /**
     * Marriage Certificate File Id
     */
    marriage_certificate_file_id?: number | null;
    /**
     * Divorce Decree File Id
     */
    divorce_decree_file_id?: number | null;
};

/**
 * MarriageResponse
 */
export type MarriageResponse = {
    /**
     * Person Id
     */
    person_id: number;
    /**
     * Spouse Id
     */
    spouse_id: number;
    /**
     * Marriage Date
     */
    marriage_date: string;
    /**
     * Marriage Location
     */
    marriage_location?: {
        [key: string]: unknown;
    } | null;
    /**
     * Separation Date
     */
    separation_date?: string | null;
    /**
     * Divorce Date
     */
    divorce_date?: string | null;
    /**
     * Current Status
     */
    current_status: string;
    /**
     * Marriage Certificate File Id
     */
    marriage_certificate_file_id?: number | null;
    /**
     * Divorce Decree File Id
     */
    divorce_decree_file_id?: number | null;
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * MarriageUpdate
 */
export type MarriageUpdate = {
    /**
     * Marriage Date
     */
    marriage_date?: string | null;
    /**
     * Marriage Location
     */
    marriage_location?: {
        [key: string]: unknown;
    } | null;
    /**
     * Separation Date
     */
    separation_date?: string | null;
    /**
     * Divorce Date
     */
    divorce_date?: string | null;
    /**
     * Current Status
     */
    current_status?: string | null;
    /**
     * Marriage Certificate File Id
     */
    marriage_certificate_file_id?: number | null;
    /**
     * Divorce Decree File Id
     */
    divorce_decree_file_id?: number | null;
};

/**
 * MarriageWithChildrenResponse
 */
export type MarriageWithChildrenResponse = {
    /**
     * Person Id
     */
    person_id: number;
    /**
     * Spouse Id
     */
    spouse_id: number;
    /**
     * Marriage Date
     */
    marriage_date: string;
    /**
     * Marriage Location
     */
    marriage_location?: {
        [key: string]: unknown;
    } | null;
    /**
     * Separation Date
     */
    separation_date?: string | null;
    /**
     * Divorce Date
     */
    divorce_date?: string | null;
    /**
     * Current Status
     */
    current_status: string;
    /**
     * Marriage Certificate File Id
     */
    marriage_certificate_file_id?: number | null;
    /**
     * Divorce Decree File Id
     */
    divorce_decree_file_id?: number | null;
    /**
     * Id
     */
    id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Children Associations
     */
    children_associations?: Array<MarriageChildrenResponse>;
};

/**
 * Message
 */
export type Message = {
    /**
     * Message
     */
    message: string;
};

/**
 * NotePriority
 */
export type NotePriority = 'low' | 'normal' | 'high' | 'urgent';

/**
 * NoteType
 */
export type NoteType = 'general' | 'strategy' | 'event' | 'document' | 'service' | 'settlement';

/**
 * OAuthInitiateRequest
 * Schema for initiating OAuth flow
 */
export type OAuthInitiateRequest = {
    /**
     * Provider
     * OAuth provider to use for authentication
     */
    provider?: string;
    /**
     * Scopes
     * List of OAuth scopes to request from the provider
     */
    scopes?: Array<string>;
    /**
     * Redirect Uri
     * Custom OAuth callback URL (defaults to backend callback if not provided)
     */
    redirect_uri?: string | null;
};

/**
 * OAuthInitiateResponse
 * Schema for OAuth initiation response
 */
export type OAuthInitiateResponse = {
    /**
     * Authorization Url
     * Complete OAuth authorization URL to redirect user to
     */
    authorization_url: string;
    /**
     * State
     * Secure state parameter for CSRF protection (store this for validation)
     */
    state: string;
    /**
     * Provider
     * OAuth provider being used
     */
    provider: string;
};

/**
 * OAuthLogin
 */
export type OAuthLogin = {
    /**
     * Email
     */
    email: string;
    /**
     * Provider
     */
    provider: string;
    /**
     * Provider Id
     */
    provider_id: string;
    /**
     * Name
     */
    name?: string | null;
};

/**
 * ObjectTagsResponse
 * Schema for returning tags associated with an object
 */
export type ObjectTagsResponse = {
    /**
     * Content Type
     */
    content_type: string;
    /**
     * Object Id
     */
    object_id: number;
    /**
     * Tags
     */
    tags: Array<TagResponse>;
};

/**
 * PartyType
 */
export type PartyType = 'court' | 'respondent' | 'applicant';

/**
 * PasswordReset
 */
export type PasswordReset = {
    /**
     * Token
     */
    token: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * PasswordResetRequest
 */
export type PasswordResetRequest = {
    /**
     * Email
     */
    email: string;
};

/**
 * PersonAddressCreate
 */
export type PersonAddressCreate = {
    /**
     * Street Address
     */
    street_address: string;
    /**
     * City
     */
    city: string;
    /**
     * State
     */
    state: string;
    /**
     * Zip Code
     */
    zip_code: string;
    /**
     * Country
     */
    country?: string | null;
    /**
     * Effective Start Date
     */
    effective_start_date: string;
    /**
     * Effective End Date
     */
    effective_end_date?: string | null;
    /**
     * Is Current
     */
    is_current?: boolean;
    /**
     * Address Type
     */
    address_type?: string | null;
    /**
     * Person Id
     */
    person_id: number;
};

/**
 * PersonAddressResponse
 */
export type PersonAddressResponse = {
    /**
     * Street Address
     */
    street_address: string;
    /**
     * City
     */
    city: string;
    /**
     * State
     */
    state: string;
    /**
     * Zip Code
     */
    zip_code: string;
    /**
     * Country
     */
    country?: string | null;
    /**
     * Effective Start Date
     */
    effective_start_date: string;
    /**
     * Effective End Date
     */
    effective_end_date?: string | null;
    /**
     * Is Current
     */
    is_current?: boolean;
    /**
     * Address Type
     */
    address_type?: string | null;
    /**
     * Id
     */
    id: number;
    /**
     * Person Id
     */
    person_id: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * PersonAddressUpdate
 */
export type PersonAddressUpdate = {
    /**
     * Street Address
     */
    street_address?: string | null;
    /**
     * City
     */
    city?: string | null;
    /**
     * State
     */
    state?: string | null;
    /**
     * Zip Code
     */
    zip_code?: string | null;
    /**
     * Country
     */
    country?: string | null;
    /**
     * Effective Start Date
     */
    effective_start_date?: string | null;
    /**
     * Effective End Date
     */
    effective_end_date?: string | null;
    /**
     * Is Current
     */
    is_current?: boolean | null;
    /**
     * Address Type
     */
    address_type?: string | null;
};

/**
 * PersonCreate
 */
export type PersonCreate = {
    /**
     * First Name
     */
    first_name: string;
    /**
     * Middle Name
     */
    middle_name?: string | null;
    /**
     * Last Name
     */
    last_name: string;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    /**
     * Date Of Birth
     */
    date_of_birth?: string | null;
    /**
     * Gender
     */
    gender?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Public
     */
    is_public?: boolean;
};

/**
 * PersonProfileResponse
 */
export type PersonProfileResponse = {
    /**
     * Bio
     */
    bio?: string | null;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Expertise
     */
    expertise?: Array<string> | null;
    /**
     * Location
     */
    location?: {
        [key: string]: unknown;
    } | null;
    /**
     * Social Links
     */
    social_links?: {
        [key: string]: string;
    } | null;
    /**
     * Ssn Last Four
     */
    ssn_last_four?: string | null;
    /**
     * Preferred Name
     */
    preferred_name?: string | null;
    /**
     * Emergency Contact
     */
    emergency_contact?: {
        [key: string]: unknown;
    } | null;
    /**
     * Is Public
     */
    is_public?: boolean;
    /**
     * Id
     */
    id: number;
    /**
     * Person Id
     */
    person_id: number;
    /**
     * Avatar File Id
     */
    avatar_file_id?: number | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * PersonProfileUpdate
 */
export type PersonProfileUpdate = {
    /**
     * Bio
     */
    bio?: string | null;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Expertise
     */
    expertise?: Array<string> | null;
    /**
     * Location
     */
    location?: {
        [key: string]: unknown;
    } | null;
    /**
     * Social Links
     */
    social_links?: {
        [key: string]: string;
    } | null;
    /**
     * Ssn Last Four
     */
    ssn_last_four?: string | null;
    /**
     * Preferred Name
     */
    preferred_name?: string | null;
    /**
     * Emergency Contact
     */
    emergency_contact?: {
        [key: string]: unknown;
    } | null;
    /**
     * Is Public
     */
    is_public?: boolean | null;
};

/**
 * PersonResponse
 */
export type PersonResponse = {
    /**
     * First Name
     */
    first_name: string;
    /**
     * Middle Name
     */
    middle_name?: string | null;
    /**
     * Last Name
     */
    last_name: string;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    /**
     * Date Of Birth
     */
    date_of_birth?: string | null;
    /**
     * Gender
     */
    gender?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Public
     */
    is_public?: boolean;
    /**
     * Id
     */
    id: number;
    /**
     * Full Name
     */
    full_name: string;
    /**
     * Slug
     */
    slug: string;
    profile?: PersonProfileResponse | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
};

/**
 * PersonUpdate
 */
export type PersonUpdate = {
    /**
     * First Name
     */
    first_name?: string | null;
    /**
     * Middle Name
     */
    middle_name?: string | null;
    /**
     * Last Name
     */
    last_name?: string | null;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Phone
     */
    phone?: string | null;
    /**
     * Date Of Birth
     */
    date_of_birth?: string | null;
    /**
     * Gender
     */
    gender?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Is Public
     */
    is_public?: boolean | null;
};

/**
 * PopularTagResponse
 * Extended tag response with popularity score
 */
export type PopularTagResponse = {
    /**
     * Name
     * Tag name
     */
    name: string;
    /**
     * Id
     */
    id: number;
    /**
     * Slug
     */
    slug: string;
    /**
     * Usage Count
     * Number of items tagged with this tag
     */
    usage_count?: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Popularity Score
     * Calculated popularity score (0.0 to 1.0)
     */
    popularity_score: number;
    /**
     * Relative Size
     * CSS size class for tag cloud (xs, sm, md, lg, xl)
     */
    relative_size: string;
};

/**
 * ProfilePictureUploadResponse
 */
export type ProfilePictureUploadResponse = {
    /**
     * Id
     */
    id: number;
    /**
     * Filename
     */
    filename: string;
    /**
     * File Size
     */
    file_size: number;
    /**
     * Avatar Url
     */
    avatar_url: string;
    /**
     * Message
     */
    message: string;
};

/**
 * RecentUserResponse
 */
export type RecentUserResponse = {
    /**
     * Id
     */
    id: number;
    /**
     * Email
     */
    email: string;
    /**
     * Full Name
     */
    full_name: string | null;
    /**
     * Created At
     */
    created_at: string;
};

/**
 * ServiceStatus
 */
export type ServiceStatus = 'pending' | 'served' | 'acknowledged' | 'disputed' | 'failed';

/**
 * ServiceType
 */
export type ServiceType = 'personal' | 'mail' | 'email' | 'courier' | 'substituted' | 'deemed';

/**
 * ShareLinkResponse
 */
export type ShareLinkResponse = {
    /**
     * Sharing Url
     */
    sharing_url: string;
    /**
     * Expires At
     */
    expires_at?: string | null;
};

/**
 * TagAutocompleteResponse
 * Schema for tag autocomplete results
 */
export type TagAutocompleteResponse = {
    /**
     * Suggestions
     * Up to 10 tag suggestions
     */
    suggestions: Array<TagResponse>;
    /**
     * Query
     * The search query that was used
     */
    query: string;
};

/**
 * TagCloudResponse
 * Schema for tag cloud data
 */
export type TagCloudResponse = {
    /**
     * Tags
     */
    tags: Array<PopularTagResponse>;
    /**
     * Max Usage Count
     */
    max_usage_count: number;
    /**
     * Min Usage Count
     */
    min_usage_count: number;
};

/**
 * TagCreate
 * Schema for creating a new tag
 */
export type TagCreate = {
    /**
     * Name
     * Tag name
     */
    name: string;
    /**
     * Slug
     * URL-safe slug (auto-generated if not provided)
     */
    slug?: string | null;
};

/**
 * TagListResponse
 * Schema for paginated tag listings
 */
export type TagListResponse = {
    /**
     * Items
     */
    items: Array<TagResponse>;
    /**
     * Total
     */
    total: number;
    /**
     * Page
     */
    page: number;
    /**
     * Per Page
     */
    per_page: number;
    /**
     * Pages
     */
    pages: number;
};

/**
 * TagObjectRequest
 * Schema for tagging an object
 */
export type TagObjectRequest = {
    /**
     * Content Type
     * Content type in format 'app_label.model'
     */
    content_type: string;
    /**
     * Object Id
     * ID of the object to tag
     */
    object_id: number;
    /**
     * Tag Names
     * List of tag names to apply
     */
    tag_names: Array<string>;
};

/**
 * TagResponse
 * Schema for tag response data
 */
export type TagResponse = {
    /**
     * Name
     * Tag name
     */
    name: string;
    /**
     * Id
     */
    id: number;
    /**
     * Slug
     */
    slug: string;
    /**
     * Usage Count
     * Number of items tagged with this tag
     */
    usage_count?: number;
    /**
     * Created At
     */
    created_at: string;
};

/**
 * TagStats
 * Schema for tag usage statistics
 */
export type TagStats = {
    /**
     * Total Tags
     */
    total_tags: number;
    /**
     * Total Tagged Items
     */
    total_tagged_items: number;
    /**
     * Most Used Tags
     */
    most_used_tags: Array<TagResponse>;
    /**
     * Recent Tags
     */
    recent_tags: Array<TagResponse>;
};

/**
 * TagUpdate
 * Schema for updating an existing tag
 */
export type TagUpdate = {
    /**
     * Name
     * Tag name
     */
    name?: string | null;
    /**
     * Slug
     * URL-safe slug
     */
    slug?: string | null;
};

/**
 * TaggedObjectResponse
 * Schema for objects that have been tagged
 */
export type TaggedObjectResponse = {
    /**
     * Content Type
     */
    content_type: string;
    /**
     * Object Id
     */
    object_id: number;
    /**
     * Object Data
     * Basic object metadata
     */
    object_data?: {
        [key: string]: unknown;
    };
    /**
     * Tags
     */
    tags: Array<TagResponse>;
};

/**
 * TaggedObjectsResponse
 * Schema for listing objects tagged with a specific tag
 */
export type TaggedObjectsResponse = {
    tag: TagResponse;
    /**
     * Objects
     */
    objects: Array<TaggedObjectResponse>;
    /**
     * Total Count
     */
    total_count: number;
    /**
     * Page
     */
    page?: number;
    /**
     * Limit
     */
    limit?: number;
};

/**
 * TokenRefreshRequest
 * Request schema for token refresh endpoint
 */
export type TokenRefreshRequest = {
    /**
     * Refresh Token
     */
    refresh_token: string;
};

/**
 * TokenWithRefresh
 * Token response that includes refresh token (for login endpoints)
 */
export type TokenWithRefresh = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Refresh Token
     */
    refresh_token: string;
    /**
     * Token Type
     */
    token_type?: string;
    /**
     * Expires In
     */
    expires_in: number;
};

/**
 * TokenWithUser
 */
export type TokenWithUser = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Refresh Token
     */
    refresh_token?: string | null;
    /**
     * Token Type
     */
    token_type: string;
    /**
     * Expires In
     */
    expires_in?: number | null;
    user: User;
};

/**
 * UntagObjectRequest
 * Schema for removing tags from an object
 */
export type UntagObjectRequest = {
    /**
     * Content Type
     * Content type in format 'app_label.model'
     */
    content_type: string;
    /**
     * Object Id
     * ID of the object to untag
     */
    object_id: number;
    /**
     * Tag Names
     * List of tag names to remove
     */
    tag_names: Array<string>;
};

/**
 * User
 */
export type User = {
    /**
     * Email
     */
    email: string;
    /**
     * First Name
     */
    first_name?: string | null;
    /**
     * Middle Name
     */
    middle_name?: string | null;
    /**
     * Last Name
     */
    last_name?: string | null;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Id
     */
    id: number;
    /**
     * Is Verified
     */
    is_verified?: boolean;
    /**
     * Roles
     */
    roles?: Array<string> | null;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at?: string | null;
    /**
     * Avatar Url
     */
    avatar_url?: string | null;
};

/**
 * UserAdminUpdate
 */
export type UserAdminUpdate = {
    /**
     * First Name
     */
    first_name?: string | null;
    /**
     * Middle Name
     */
    middle_name?: string | null;
    /**
     * Last Name
     */
    last_name?: string | null;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Is Superuser
     */
    is_superuser?: boolean | null;
    /**
     * Roles
     */
    roles?: Array<string> | null;
};

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Email
     */
    email: string;
    /**
     * First Name
     */
    first_name?: string | null;
    /**
     * Middle Name
     */
    middle_name?: string | null;
    /**
     * Last Name
     */
    last_name?: string | null;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean;
    /**
     * Is Superuser
     */
    is_superuser?: boolean;
    /**
     * Password
     */
    password: string;
};

/**
 * UserListResponse
 */
export type UserListResponse = {
    /**
     * Users
     */
    users: Array<User>;
    /**
     * Total
     */
    total: number;
    /**
     * Page
     */
    page: number;
    /**
     * Per Page
     */
    per_page: number;
    /**
     * Total Pages
     */
    total_pages: number;
};

/**
 * UserProfileResponse
 */
export type UserProfileResponse = {
    /**
     * Bio
     */
    bio?: string | null;
    /**
     * Website
     */
    website?: string | null;
    /**
     * Twitter
     */
    twitter?: string | null;
    /**
     * Linkedin
     */
    linkedin?: string | null;
    /**
     * Github
     */
    github?: string | null;
    /**
     * Public Profile
     */
    public_profile?: boolean;
    /**
     * Person Id
     */
    person_id?: number | null;
    /**
     * Id
     */
    id: number;
    /**
     * User Id
     */
    user_id: number;
    /**
     * Avatar Url
     */
    avatar_url?: string | null;
    /**
     * Profile Picture File Id
     */
    profile_picture_file_id?: number | null;
    /**
     * Storage Quota
     */
    storage_quota: number;
    /**
     * Storage Used
     */
    storage_used: number;
    /**
     * Created At
     */
    created_at: string;
    /**
     * Updated At
     */
    updated_at: string;
};

/**
 * UserProfileUpdate
 */
export type UserProfileUpdate = {
    /**
     * Bio
     */
    bio?: string | null;
    /**
     * Website
     */
    website?: string | null;
    /**
     * Twitter
     */
    twitter?: string | null;
    /**
     * Linkedin
     */
    linkedin?: string | null;
    /**
     * Github
     */
    github?: string | null;
    /**
     * Public Profile
     */
    public_profile?: boolean;
    /**
     * Person Id
     */
    person_id?: number | null;
};

/**
 * UserStatsResponse
 */
export type UserStatsResponse = {
    /**
     * Total Users
     */
    total_users: number;
    /**
     * Active Users
     */
    active_users: number;
    /**
     * Inactive Users
     */
    inactive_users: number;
    /**
     * Verified Users
     */
    verified_users: number;
    /**
     * Unverified Users
     */
    unverified_users: number;
    /**
     * Superusers
     */
    superusers: number;
    /**
     * Recent Registrations
     */
    recent_registrations: number;
};

/**
 * UserUpdate
 */
export type UserUpdate = {
    /**
     * Email
     */
    email?: string | null;
    /**
     * First Name
     */
    first_name?: string | null;
    /**
     * Middle Name
     */
    middle_name?: string | null;
    /**
     * Last Name
     */
    last_name?: string | null;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Password
     */
    password?: string | null;
    /**
     * Is Active
     */
    is_active?: boolean | null;
    /**
     * Is Superuser
     */
    is_superuser?: boolean | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

/**
 * FileUploadResponse
 */
export type CasesSchemasFileUploadResponse = {
    /**
     * Document Id
     */
    document_id: number;
    /**
     * Stored Filename
     */
    stored_filename: string;
    /**
     * File Path
     */
    file_path: string;
    /**
     * Message
     */
    message?: string;
};

/**
 * TokenRefreshResponse
 * Schema for token refresh responses
 */
export type EmailConnectionsSchemasTokenRefreshResponse = {
    /**
     * Connection Id
     */
    connection_id: number;
    /**
     * Success
     */
    success: boolean;
    /**
     * New Expires At
     */
    new_expires_at?: string | null;
    /**
     * Error Message
     */
    error_message?: string | null;
};

/**
 * FileUploadResponse
 */
export type StorageSchemasFileUploadResponse = {
    /**
     * Id
     */
    id: number;
    /**
     * Filename
     */
    filename: string;
    /**
     * Original Filename
     */
    original_filename: string;
    /**
     * File Path
     */
    file_path: string;
    /**
     * File Size
     */
    file_size: number;
    /**
     * Content Type
     */
    content_type: string;
    /**
     * Dropbox Path
     */
    dropbox_path?: string | null;
    /**
     * Dropbox Id
     */
    dropbox_id?: string | null;
    /**
     * Uploaded At
     */
    uploaded_at: string;
    /**
     * User Profile Id
     */
    user_profile_id: number;
    /**
     * Category
     */
    category: string;
    /**
     * Image Id
     */
    image_id?: number | null;
};

/**
 * TokenRefreshResponse
 * Response schema for token refresh endpoint
 */
export type UsersSchemasTokenRefreshResponse = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Refresh Token
     */
    refresh_token: string;
    /**
     * Token Type
     */
    token_type?: string;
    /**
     * Expires In
     */
    expires_in: number;
};

export type RegisterApiV1AuthRegisterPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/auth/register';
};

export type RegisterApiV1AuthRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterApiV1AuthRegisterPostError = RegisterApiV1AuthRegisterPostErrors[keyof RegisterApiV1AuthRegisterPostErrors];

export type RegisterApiV1AuthRegisterPostResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type RegisterApiV1AuthRegisterPostResponse = RegisterApiV1AuthRegisterPostResponses[keyof RegisterApiV1AuthRegisterPostResponses];

export type LoginApiV1AuthLoginPostData = {
    body: BodyLoginApiV1AuthLoginPost;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type LoginApiV1AuthLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginApiV1AuthLoginPostError = LoginApiV1AuthLoginPostErrors[keyof LoginApiV1AuthLoginPostErrors];

export type LoginApiV1AuthLoginPostResponses = {
    /**
     * Successful Response
     */
    200: TokenWithRefresh;
};

export type LoginApiV1AuthLoginPostResponse = LoginApiV1AuthLoginPostResponses[keyof LoginApiV1AuthLoginPostResponses];

export type VerifyEmailApiV1AuthVerifyEmailPostData = {
    body: EmailVerification;
    path?: never;
    query?: never;
    url: '/api/v1/auth/verify-email';
};

export type VerifyEmailApiV1AuthVerifyEmailPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type VerifyEmailApiV1AuthVerifyEmailPostError = VerifyEmailApiV1AuthVerifyEmailPostErrors[keyof VerifyEmailApiV1AuthVerifyEmailPostErrors];

export type VerifyEmailApiV1AuthVerifyEmailPostResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type VerifyEmailApiV1AuthVerifyEmailPostResponse = VerifyEmailApiV1AuthVerifyEmailPostResponses[keyof VerifyEmailApiV1AuthVerifyEmailPostResponses];

export type ForgotPasswordApiV1AuthForgotPasswordPostData = {
    body: PasswordResetRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/forgot-password';
};

export type ForgotPasswordApiV1AuthForgotPasswordPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ForgotPasswordApiV1AuthForgotPasswordPostError = ForgotPasswordApiV1AuthForgotPasswordPostErrors[keyof ForgotPasswordApiV1AuthForgotPasswordPostErrors];

export type ForgotPasswordApiV1AuthForgotPasswordPostResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type ForgotPasswordApiV1AuthForgotPasswordPostResponse = ForgotPasswordApiV1AuthForgotPasswordPostResponses[keyof ForgotPasswordApiV1AuthForgotPasswordPostResponses];

export type ResetPasswordApiV1AuthResetPasswordPostData = {
    body: PasswordReset;
    path?: never;
    query?: never;
    url: '/api/v1/auth/reset-password';
};

export type ResetPasswordApiV1AuthResetPasswordPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ResetPasswordApiV1AuthResetPasswordPostError = ResetPasswordApiV1AuthResetPasswordPostErrors[keyof ResetPasswordApiV1AuthResetPasswordPostErrors];

export type ResetPasswordApiV1AuthResetPasswordPostResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type ResetPasswordApiV1AuthResetPasswordPostResponse = ResetPasswordApiV1AuthResetPasswordPostResponses[keyof ResetPasswordApiV1AuthResetPasswordPostResponses];

export type OauthLoginApiV1AuthOauthLoginPostData = {
    body: OAuthLogin;
    path?: never;
    query?: never;
    url: '/api/v1/auth/oauth-login';
};

export type OauthLoginApiV1AuthOauthLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type OauthLoginApiV1AuthOauthLoginPostError = OauthLoginApiV1AuthOauthLoginPostErrors[keyof OauthLoginApiV1AuthOauthLoginPostErrors];

export type OauthLoginApiV1AuthOauthLoginPostResponses = {
    /**
     * Successful Response
     */
    200: TokenWithUser;
};

export type OauthLoginApiV1AuthOauthLoginPostResponse = OauthLoginApiV1AuthOauthLoginPostResponses[keyof OauthLoginApiV1AuthOauthLoginPostResponses];

export type RefreshTokenApiV1AuthRefreshPostData = {
    body: TokenRefreshRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/refresh';
};

export type RefreshTokenApiV1AuthRefreshPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RefreshTokenApiV1AuthRefreshPostError = RefreshTokenApiV1AuthRefreshPostErrors[keyof RefreshTokenApiV1AuthRefreshPostErrors];

export type RefreshTokenApiV1AuthRefreshPostResponses = {
    /**
     * Successful Response
     */
    200: UsersSchemasTokenRefreshResponse;
};

export type RefreshTokenApiV1AuthRefreshPostResponse = RefreshTokenApiV1AuthRefreshPostResponses[keyof RefreshTokenApiV1AuthRefreshPostResponses];

export type LogoutApiV1AuthLogoutPostData = {
    body: TokenRefreshRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/logout';
};

export type LogoutApiV1AuthLogoutPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LogoutApiV1AuthLogoutPostError = LogoutApiV1AuthLogoutPostErrors[keyof LogoutApiV1AuthLogoutPostErrors];

export type LogoutApiV1AuthLogoutPostResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type LogoutApiV1AuthLogoutPostResponse = LogoutApiV1AuthLogoutPostResponses[keyof LogoutApiV1AuthLogoutPostResponses];

export type LogoutAllApiV1AuthLogoutAllPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/logout-all';
};

export type LogoutAllApiV1AuthLogoutAllPostResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type LogoutAllApiV1AuthLogoutAllPostResponse = LogoutAllApiV1AuthLogoutAllPostResponses[keyof LogoutAllApiV1AuthLogoutAllPostResponses];

export type ReadUsersMeApiV1UsersMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type ReadUsersMeApiV1UsersMeGetResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type ReadUsersMeApiV1UsersMeGetResponse = ReadUsersMeApiV1UsersMeGetResponses[keyof ReadUsersMeApiV1UsersMeGetResponses];

export type UpdateUserMeApiV1UsersMePutData = {
    body: UserUpdate;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UpdateUserMeApiV1UsersMePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateUserMeApiV1UsersMePutError = UpdateUserMeApiV1UsersMePutErrors[keyof UpdateUserMeApiV1UsersMePutErrors];

export type UpdateUserMeApiV1UsersMePutResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type UpdateUserMeApiV1UsersMePutResponse = UpdateUserMeApiV1UsersMePutResponses[keyof UpdateUserMeApiV1UsersMePutResponses];

export type AdminListUsersApiV1AdminUsersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page
         */
        page?: number;
        /**
         * Per Page
         */
        per_page?: number;
        /**
         * Search
         */
        search?: string;
        /**
         * Status
         */
        status?: string;
    };
    url: '/api/v1/admin/users';
};

export type AdminListUsersApiV1AdminUsersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AdminListUsersApiV1AdminUsersGetError = AdminListUsersApiV1AdminUsersGetErrors[keyof AdminListUsersApiV1AdminUsersGetErrors];

export type AdminListUsersApiV1AdminUsersGetResponses = {
    /**
     * Successful Response
     */
    200: UserListResponse;
};

export type AdminListUsersApiV1AdminUsersGetResponse = AdminListUsersApiV1AdminUsersGetResponses[keyof AdminListUsersApiV1AdminUsersGetResponses];

export type DeleteUserApiV1UsersUserIdDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type DeleteUserApiV1UsersUserIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteUserApiV1UsersUserIdDeleteError = DeleteUserApiV1UsersUserIdDeleteErrors[keyof DeleteUserApiV1UsersUserIdDeleteErrors];

export type DeleteUserApiV1UsersUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type DeleteUserApiV1UsersUserIdDeleteResponse = DeleteUserApiV1UsersUserIdDeleteResponses[keyof DeleteUserApiV1UsersUserIdDeleteResponses];

export type ReadUserApiV1UsersUserIdGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type ReadUserApiV1UsersUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ReadUserApiV1UsersUserIdGetError = ReadUserApiV1UsersUserIdGetErrors[keyof ReadUserApiV1UsersUserIdGetErrors];

export type ReadUserApiV1UsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type ReadUserApiV1UsersUserIdGetResponse = ReadUserApiV1UsersUserIdGetResponses[keyof ReadUserApiV1UsersUserIdGetResponses];

export type AdminDeleteUserApiV1AdminUsersUserIdDeleteData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/admin/users/{user_id}';
};

export type AdminDeleteUserApiV1AdminUsersUserIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AdminDeleteUserApiV1AdminUsersUserIdDeleteError = AdminDeleteUserApiV1AdminUsersUserIdDeleteErrors[keyof AdminDeleteUserApiV1AdminUsersUserIdDeleteErrors];

export type AdminDeleteUserApiV1AdminUsersUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type AdminDeleteUserApiV1AdminUsersUserIdDeleteResponse = AdminDeleteUserApiV1AdminUsersUserIdDeleteResponses[keyof AdminDeleteUserApiV1AdminUsersUserIdDeleteResponses];

export type AdminGetUserApiV1AdminUsersUserIdGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/admin/users/{user_id}';
};

export type AdminGetUserApiV1AdminUsersUserIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AdminGetUserApiV1AdminUsersUserIdGetError = AdminGetUserApiV1AdminUsersUserIdGetErrors[keyof AdminGetUserApiV1AdminUsersUserIdGetErrors];

export type AdminGetUserApiV1AdminUsersUserIdGetResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type AdminGetUserApiV1AdminUsersUserIdGetResponse = AdminGetUserApiV1AdminUsersUserIdGetResponses[keyof AdminGetUserApiV1AdminUsersUserIdGetResponses];

export type AdminUpdateUserApiV1AdminUsersUserIdPutData = {
    body: UserAdminUpdate;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/admin/users/{user_id}';
};

export type AdminUpdateUserApiV1AdminUsersUserIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AdminUpdateUserApiV1AdminUsersUserIdPutError = AdminUpdateUserApiV1AdminUsersUserIdPutErrors[keyof AdminUpdateUserApiV1AdminUsersUserIdPutErrors];

export type AdminUpdateUserApiV1AdminUsersUserIdPutResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type AdminUpdateUserApiV1AdminUsersUserIdPutResponse = AdminUpdateUserApiV1AdminUsersUserIdPutResponses[keyof AdminUpdateUserApiV1AdminUsersUserIdPutResponses];

export type AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/admin/users/{user_id}/status';
};

export type AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostError = AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostErrors[keyof AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostErrors];

export type AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostResponse = AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostResponses[keyof AdminToggleUserStatusApiV1AdminUsersUserIdStatusPostResponses];

export type AdminGetStatsApiV1AdminStatsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/admin/stats';
};

export type AdminGetStatsApiV1AdminStatsGetResponses = {
    /**
     * Successful Response
     */
    200: UserStatsResponse;
};

export type AdminGetStatsApiV1AdminStatsGetResponse = AdminGetStatsApiV1AdminStatsGetResponses[keyof AdminGetStatsApiV1AdminStatsGetResponses];

export type AdminGetRecentUsersApiV1AdminRecentUsersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Days
         */
        days?: number;
        /**
         * Limit
         */
        limit?: number;
    };
    url: '/api/v1/admin/recent-users';
};

export type AdminGetRecentUsersApiV1AdminRecentUsersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AdminGetRecentUsersApiV1AdminRecentUsersGetError = AdminGetRecentUsersApiV1AdminRecentUsersGetErrors[keyof AdminGetRecentUsersApiV1AdminRecentUsersGetErrors];

export type AdminGetRecentUsersApiV1AdminRecentUsersGetResponses = {
    /**
     * Response Admin Get Recent Users Api V1 Admin Recent Users Get
     * Successful Response
     */
    200: Array<RecentUserResponse>;
};

export type AdminGetRecentUsersApiV1AdminRecentUsersGetResponse = AdminGetRecentUsersApiV1AdminRecentUsersGetResponses[keyof AdminGetRecentUsersApiV1AdminRecentUsersGetResponses];

export type AdminGetEmailStatusApiV1AdminEmailStatusGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/admin/email/status';
};

export type AdminGetEmailStatusApiV1AdminEmailStatusGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMyProfileApiV1UsersMeProfileGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/profile';
};

export type GetMyProfileApiV1UsersMeProfileGetResponses = {
    /**
     * Successful Response
     */
    200: UserProfileResponse;
};

export type GetMyProfileApiV1UsersMeProfileGetResponse = GetMyProfileApiV1UsersMeProfileGetResponses[keyof GetMyProfileApiV1UsersMeProfileGetResponses];

export type UpdateMyProfileApiV1UsersMeProfilePutData = {
    body: UserProfileUpdate;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/profile';
};

export type UpdateMyProfileApiV1UsersMeProfilePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateMyProfileApiV1UsersMeProfilePutError = UpdateMyProfileApiV1UsersMeProfilePutErrors[keyof UpdateMyProfileApiV1UsersMeProfilePutErrors];

export type UpdateMyProfileApiV1UsersMeProfilePutResponses = {
    /**
     * Successful Response
     */
    200: UserProfileResponse;
};

export type UpdateMyProfileApiV1UsersMeProfilePutResponse = UpdateMyProfileApiV1UsersMeProfilePutResponses[keyof UpdateMyProfileApiV1UsersMeProfilePutResponses];

export type GetUserProfileApiV1UsersUserIdProfileGetData = {
    body?: never;
    path: {
        /**
         * User Id
         */
        user_id: number;
    };
    query?: never;
    url: '/api/v1/users/{user_id}/profile';
};

export type GetUserProfileApiV1UsersUserIdProfileGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserProfileApiV1UsersUserIdProfileGetError = GetUserProfileApiV1UsersUserIdProfileGetErrors[keyof GetUserProfileApiV1UsersUserIdProfileGetErrors];

export type GetUserProfileApiV1UsersUserIdProfileGetResponses = {
    /**
     * Successful Response
     */
    200: UserProfileResponse;
};

export type GetUserProfileApiV1UsersUserIdProfileGetResponse = GetUserProfileApiV1UsersUserIdProfileGetResponses[keyof GetUserProfileApiV1UsersUserIdProfileGetResponses];

export type DeleteProfilePictureApiV1UsersMeProfilePictureDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/profile/picture';
};

export type DeleteProfilePictureApiV1UsersMeProfilePictureDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UploadProfilePictureApiV1UsersMeProfilePicturePostData = {
    body: BodyUploadProfilePictureApiV1UsersMeProfilePicturePost;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/profile/picture';
};

export type UploadProfilePictureApiV1UsersMeProfilePicturePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadProfilePictureApiV1UsersMeProfilePicturePostError = UploadProfilePictureApiV1UsersMeProfilePicturePostErrors[keyof UploadProfilePictureApiV1UsersMeProfilePicturePostErrors];

export type UploadProfilePictureApiV1UsersMeProfilePicturePostResponses = {
    /**
     * Successful Response
     */
    200: ProfilePictureUploadResponse;
};

export type UploadProfilePictureApiV1UsersMeProfilePicturePostResponse = UploadProfilePictureApiV1UsersMeProfilePicturePostResponses[keyof UploadProfilePictureApiV1UsersMeProfilePicturePostResponses];

export type UploadAvatarApiV1UsersMeAvatarPostData = {
    body: BodyUploadAvatarApiV1UsersMeAvatarPost;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/avatar';
};

export type UploadAvatarApiV1UsersMeAvatarPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadAvatarApiV1UsersMeAvatarPostError = UploadAvatarApiV1UsersMeAvatarPostErrors[keyof UploadAvatarApiV1UsersMeAvatarPostErrors];

export type UploadAvatarApiV1UsersMeAvatarPostResponses = {
    /**
     * Successful Response
     */
    200: ProfilePictureUploadResponse;
};

export type UploadAvatarApiV1UsersMeAvatarPostResponse = UploadAvatarApiV1UsersMeAvatarPostResponses[keyof UploadAvatarApiV1UsersMeAvatarPostResponses];

export type UnlinkUserFromPersonApiV1UsersMeProfilePersonDeleteData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/profile/person';
};

export type UnlinkUserFromPersonApiV1UsersMeProfilePersonDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetLinkedPersonApiV1UsersMeProfilePersonGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/profile/person';
};

export type GetLinkedPersonApiV1UsersMeProfilePersonGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type LinkUserToPersonApiV1UsersMeProfilePersonPutData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Person Id
         */
        person_id: number;
    };
    url: '/api/v1/users/me/profile/person';
};

export type LinkUserToPersonApiV1UsersMeProfilePersonPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LinkUserToPersonApiV1UsersMeProfilePersonPutError = LinkUserToPersonApiV1UsersMeProfilePersonPutErrors[keyof LinkUserToPersonApiV1UsersMeProfilePersonPutErrors];

export type LinkUserToPersonApiV1UsersMeProfilePersonPutResponses = {
    /**
     * Successful Response
     */
    200: UserProfileResponse;
};

export type LinkUserToPersonApiV1UsersMeProfilePersonPutResponse = LinkUserToPersonApiV1UsersMeProfilePersonPutResponses[keyof LinkUserToPersonApiV1UsersMeProfilePersonPutResponses];

export type TestStorageConnectionApiV1StorageTestConnectionGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/storage/test-connection';
};

export type TestStorageConnectionApiV1StorageTestConnectionGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetStorageProfileApiV1StorageProfileGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/storage/profile';
};

export type GetStorageProfileApiV1StorageProfileGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UploadFileApiV1StorageUploadPostData = {
    body: BodyUploadFileApiV1StorageUploadPost;
    path?: never;
    query?: {
        /**
         * Category
         */
        category?: string;
        /**
         * Slug
         */
        slug?: string;
    };
    url: '/api/v1/storage/upload';
};

export type UploadFileApiV1StorageUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadFileApiV1StorageUploadPostError = UploadFileApiV1StorageUploadPostErrors[keyof UploadFileApiV1StorageUploadPostErrors];

export type UploadFileApiV1StorageUploadPostResponses = {
    /**
     * Successful Response
     */
    200: StorageSchemasFileUploadResponse;
};

export type UploadFileApiV1StorageUploadPostResponse = UploadFileApiV1StorageUploadPostResponses[keyof UploadFileApiV1StorageUploadPostResponses];

export type ListFilesApiV1StorageFilesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Page
         */
        page?: number;
        /**
         * Per Page
         */
        per_page?: number;
        /**
         * Category
         */
        category?: string | null;
    };
    url: '/api/v1/storage/files';
};

export type ListFilesApiV1StorageFilesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListFilesApiV1StorageFilesGetError = ListFilesApiV1StorageFilesGetErrors[keyof ListFilesApiV1StorageFilesGetErrors];

export type ListFilesApiV1StorageFilesGetResponses = {
    /**
     * Successful Response
     */
    200: FileListResponse;
};

export type ListFilesApiV1StorageFilesGetResponse = ListFilesApiV1StorageFilesGetResponses[keyof ListFilesApiV1StorageFilesGetResponses];

export type DeleteFileApiV1StorageFilesFileIdDeleteData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: number;
    };
    query?: never;
    url: '/api/v1/storage/files/{file_id}';
};

export type DeleteFileApiV1StorageFilesFileIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteFileApiV1StorageFilesFileIdDeleteError = DeleteFileApiV1StorageFilesFileIdDeleteErrors[keyof DeleteFileApiV1StorageFilesFileIdDeleteErrors];

export type DeleteFileApiV1StorageFilesFileIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetFileInfoApiV1StorageFilesFileIdGetData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: number;
    };
    query?: never;
    url: '/api/v1/storage/files/{file_id}';
};

export type GetFileInfoApiV1StorageFilesFileIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetFileInfoApiV1StorageFilesFileIdGetError = GetFileInfoApiV1StorageFilesFileIdGetErrors[keyof GetFileInfoApiV1StorageFilesFileIdGetErrors];

export type GetFileInfoApiV1StorageFilesFileIdGetResponses = {
    /**
     * Successful Response
     */
    200: FileInfo;
};

export type GetFileInfoApiV1StorageFilesFileIdGetResponse = GetFileInfoApiV1StorageFilesFileIdGetResponses[keyof GetFileInfoApiV1StorageFilesFileIdGetResponses];

export type CreateShareLinkApiV1StorageFilesFileIdSharePostData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: number;
    };
    query?: never;
    url: '/api/v1/storage/files/{file_id}/share';
};

export type CreateShareLinkApiV1StorageFilesFileIdSharePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateShareLinkApiV1StorageFilesFileIdSharePostError = CreateShareLinkApiV1StorageFilesFileIdSharePostErrors[keyof CreateShareLinkApiV1StorageFilesFileIdSharePostErrors];

export type CreateShareLinkApiV1StorageFilesFileIdSharePostResponses = {
    /**
     * Successful Response
     */
    200: ShareLinkResponse;
};

export type CreateShareLinkApiV1StorageFilesFileIdSharePostResponse = CreateShareLinkApiV1StorageFilesFileIdSharePostResponses[keyof CreateShareLinkApiV1StorageFilesFileIdSharePostResponses];

export type DownloadFileApiV1StorageFilesFileIdDownloadGetData = {
    body?: never;
    path: {
        /**
         * File Id
         */
        file_id: number;
    };
    query?: never;
    url: '/api/v1/storage/files/{file_id}/download';
};

export type DownloadFileApiV1StorageFilesFileIdDownloadGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadFileApiV1StorageFilesFileIdDownloadGetError = DownloadFileApiV1StorageFilesFileIdDownloadGetErrors[keyof DownloadFileApiV1StorageFilesFileIdDownloadGetErrors];

export type DownloadFileApiV1StorageFilesFileIdDownloadGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListCompaniesApiV1ContactsCompaniesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Search
         */
        search?: string | null;
        /**
         * Is Active
         */
        is_active?: boolean | null;
        /**
         * Is Public
         */
        is_public?: boolean | null;
    };
    url: '/api/v1/contacts/companies';
};

export type ListCompaniesApiV1ContactsCompaniesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListCompaniesApiV1ContactsCompaniesGetError = ListCompaniesApiV1ContactsCompaniesGetErrors[keyof ListCompaniesApiV1ContactsCompaniesGetErrors];

export type ListCompaniesApiV1ContactsCompaniesGetResponses = {
    /**
     * Response List Companies Api V1 Contacts Companies Get
     * Successful Response
     */
    200: Array<CompanyResponse>;
};

export type ListCompaniesApiV1ContactsCompaniesGetResponse = ListCompaniesApiV1ContactsCompaniesGetResponses[keyof ListCompaniesApiV1ContactsCompaniesGetResponses];

export type CreateCompanyApiV1ContactsCompaniesPostData = {
    body: CompanyCreate;
    path?: never;
    query?: never;
    url: '/api/v1/contacts/companies';
};

export type CreateCompanyApiV1ContactsCompaniesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCompanyApiV1ContactsCompaniesPostError = CreateCompanyApiV1ContactsCompaniesPostErrors[keyof CreateCompanyApiV1ContactsCompaniesPostErrors];

export type CreateCompanyApiV1ContactsCompaniesPostResponses = {
    /**
     * Successful Response
     */
    200: CompanyResponse;
};

export type CreateCompanyApiV1ContactsCompaniesPostResponse = CreateCompanyApiV1ContactsCompaniesPostResponses[keyof CreateCompanyApiV1ContactsCompaniesPostResponses];

export type DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteData = {
    body?: never;
    path: {
        /**
         * Company Id
         */
        company_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/companies/{company_id}';
};

export type DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteError = DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteErrors[keyof DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteErrors];

export type DeleteCompanyApiV1ContactsCompaniesCompanyIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetCompanyApiV1ContactsCompaniesCompanyIdGetData = {
    body?: never;
    path: {
        /**
         * Company Id
         */
        company_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/companies/{company_id}';
};

export type GetCompanyApiV1ContactsCompaniesCompanyIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCompanyApiV1ContactsCompaniesCompanyIdGetError = GetCompanyApiV1ContactsCompaniesCompanyIdGetErrors[keyof GetCompanyApiV1ContactsCompaniesCompanyIdGetErrors];

export type GetCompanyApiV1ContactsCompaniesCompanyIdGetResponses = {
    /**
     * Successful Response
     */
    200: CompanyResponse;
};

export type GetCompanyApiV1ContactsCompaniesCompanyIdGetResponse = GetCompanyApiV1ContactsCompaniesCompanyIdGetResponses[keyof GetCompanyApiV1ContactsCompaniesCompanyIdGetResponses];

export type UpdateCompanyApiV1ContactsCompaniesCompanyIdPutData = {
    body: CompanyUpdate;
    path: {
        /**
         * Company Id
         */
        company_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/companies/{company_id}';
};

export type UpdateCompanyApiV1ContactsCompaniesCompanyIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCompanyApiV1ContactsCompaniesCompanyIdPutError = UpdateCompanyApiV1ContactsCompaniesCompanyIdPutErrors[keyof UpdateCompanyApiV1ContactsCompaniesCompanyIdPutErrors];

export type UpdateCompanyApiV1ContactsCompaniesCompanyIdPutResponses = {
    /**
     * Successful Response
     */
    200: CompanyResponse;
};

export type UpdateCompanyApiV1ContactsCompaniesCompanyIdPutResponse = UpdateCompanyApiV1ContactsCompaniesCompanyIdPutResponses[keyof UpdateCompanyApiV1ContactsCompaniesCompanyIdPutResponses];

export type ListPeopleApiV1ContactsPeopleGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Search
         */
        search?: string | null;
        /**
         * Is Active
         */
        is_active?: boolean | null;
        /**
         * Is Public
         */
        is_public?: boolean | null;
    };
    url: '/api/v1/contacts/people';
};

export type ListPeopleApiV1ContactsPeopleGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListPeopleApiV1ContactsPeopleGetError = ListPeopleApiV1ContactsPeopleGetErrors[keyof ListPeopleApiV1ContactsPeopleGetErrors];

export type ListPeopleApiV1ContactsPeopleGetResponses = {
    /**
     * Response List People Api V1 Contacts People Get
     * Successful Response
     */
    200: Array<PersonResponse>;
};

export type ListPeopleApiV1ContactsPeopleGetResponse = ListPeopleApiV1ContactsPeopleGetResponses[keyof ListPeopleApiV1ContactsPeopleGetResponses];

export type CreatePersonApiV1ContactsPeoplePostData = {
    body: PersonCreate;
    path?: never;
    query?: never;
    url: '/api/v1/contacts/people';
};

export type CreatePersonApiV1ContactsPeoplePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreatePersonApiV1ContactsPeoplePostError = CreatePersonApiV1ContactsPeoplePostErrors[keyof CreatePersonApiV1ContactsPeoplePostErrors];

export type CreatePersonApiV1ContactsPeoplePostResponses = {
    /**
     * Successful Response
     */
    200: PersonResponse;
};

export type CreatePersonApiV1ContactsPeoplePostResponse = CreatePersonApiV1ContactsPeoplePostResponses[keyof CreatePersonApiV1ContactsPeoplePostResponses];

export type DeletePersonApiV1ContactsPeoplePersonIdDeleteData = {
    body?: never;
    path: {
        /**
         * Person Id
         */
        person_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/people/{person_id}';
};

export type DeletePersonApiV1ContactsPeoplePersonIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeletePersonApiV1ContactsPeoplePersonIdDeleteError = DeletePersonApiV1ContactsPeoplePersonIdDeleteErrors[keyof DeletePersonApiV1ContactsPeoplePersonIdDeleteErrors];

export type DeletePersonApiV1ContactsPeoplePersonIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetPersonApiV1ContactsPeoplePersonIdGetData = {
    body?: never;
    path: {
        /**
         * Person Id
         */
        person_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/people/{person_id}';
};

export type GetPersonApiV1ContactsPeoplePersonIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPersonApiV1ContactsPeoplePersonIdGetError = GetPersonApiV1ContactsPeoplePersonIdGetErrors[keyof GetPersonApiV1ContactsPeoplePersonIdGetErrors];

export type GetPersonApiV1ContactsPeoplePersonIdGetResponses = {
    /**
     * Successful Response
     */
    200: PersonResponse;
};

export type GetPersonApiV1ContactsPeoplePersonIdGetResponse = GetPersonApiV1ContactsPeoplePersonIdGetResponses[keyof GetPersonApiV1ContactsPeoplePersonIdGetResponses];

export type UpdatePersonApiV1ContactsPeoplePersonIdPutData = {
    body: PersonUpdate;
    path: {
        /**
         * Person Id
         */
        person_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/people/{person_id}';
};

export type UpdatePersonApiV1ContactsPeoplePersonIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdatePersonApiV1ContactsPeoplePersonIdPutError = UpdatePersonApiV1ContactsPeoplePersonIdPutErrors[keyof UpdatePersonApiV1ContactsPeoplePersonIdPutErrors];

export type UpdatePersonApiV1ContactsPeoplePersonIdPutResponses = {
    /**
     * Successful Response
     */
    200: PersonResponse;
};

export type UpdatePersonApiV1ContactsPeoplePersonIdPutResponse = UpdatePersonApiV1ContactsPeoplePersonIdPutResponses[keyof UpdatePersonApiV1ContactsPeoplePersonIdPutResponses];

export type UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutData = {
    body: CompanyProfileUpdate;
    path: {
        /**
         * Company Id
         */
        company_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/companies/{company_id}/profile';
};

export type UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutError = UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutErrors[keyof UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutErrors];

export type UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutResponses = {
    /**
     * Successful Response
     */
    200: CompanyProfileResponse;
};

export type UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutResponse = UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutResponses[keyof UpdateCompanyProfileApiV1ContactsCompaniesCompanyIdProfilePutResponses];

export type UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutData = {
    body: PersonProfileUpdate;
    path: {
        /**
         * Person Id
         */
        person_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/people/{person_id}/profile';
};

export type UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutError = UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutErrors[keyof UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutErrors];

export type UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutResponses = {
    /**
     * Successful Response
     */
    200: PersonProfileResponse;
};

export type UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutResponse = UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutResponses[keyof UpdatePersonProfileApiV1ContactsPeoplePersonIdProfilePutResponses];

export type UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostData = {
    body: BodyUploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPost;
    path: {
        /**
         * Profile Type
         */
        profile_type: string;
        /**
         * Profile Id
         */
        profile_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/profiles/{profile_type}/{profile_id}/upload';
};

export type UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostError = UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostErrors[keyof UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostErrors];

export type UploadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdUploadPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetData = {
    body?: never;
    path: {
        /**
         * Profile Type
         */
        profile_type: string;
        /**
         * Profile Id
         */
        profile_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/profiles/{profile_type}/{profile_id}/media';
};

export type ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetError = ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetErrors[keyof ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetErrors];

export type ListProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteData = {
    body?: never;
    path: {
        /**
         * Profile Type
         */
        profile_type: string;
        /**
         * Profile Id
         */
        profile_id: number;
        /**
         * File Id
         */
        file_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/profiles/{profile_type}/{profile_id}/media/{file_id}';
};

export type DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteError = DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteErrors[keyof DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteErrors];

export type DeleteProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetData = {
    body?: never;
    path: {
        /**
         * Profile Type
         */
        profile_type: string;
        /**
         * Profile Id
         */
        profile_id: number;
        /**
         * File Id
         */
        file_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/profiles/{profile_type}/{profile_id}/media/{file_id}/download';
};

export type DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetError = DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetErrors[keyof DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetErrors];

export type DownloadProfileMediaApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdDownloadGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetData = {
    body?: never;
    path: {
        /**
         * Profile Type
         */
        profile_type: string;
        /**
         * Profile Id
         */
        profile_id: number;
        /**
         * File Id
         */
        file_id: number;
    };
    query?: {
        /**
         * Size
         * Thumbnail size in pixels
         */
        size?: number;
    };
    url: '/api/v1/contacts/profiles/{profile_type}/{profile_id}/media/{file_id}/thumbnail';
};

export type GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetError = GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetErrors[keyof GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetErrors];

export type GetProfileMediaThumbnailApiV1ContactsProfilesProfileTypeProfileIdMediaFileIdThumbnailGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetData = {
    body?: never;
    path: {
        /**
         * Profile Type
         */
        profile_type: string;
        /**
         * Slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/contacts/public/profiles/{profile_type}/{slug}/media';
};

export type ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetError = ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetErrors[keyof ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetErrors];

export type ListPublicProfileMediaApiV1ContactsPublicProfilesProfileTypeSlugMediaGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetData = {
    body?: never;
    path: {
        /**
         * Profile Type
         */
        profile_type: string;
        /**
         * Slug
         */
        slug: string;
        /**
         * File Id
         */
        file_id: number;
    };
    query?: {
        /**
         * Size
         * Thumbnail size in pixels
         */
        size?: number;
    };
    url: '/api/v1/contacts/public/profiles/{profile_type}/{slug}/media/{file_id}/thumbnail';
};

export type GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetError = GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetErrors[keyof GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetErrors];

export type GetPublicProfileMediaThumbnailApiV1ContactsPublicProfilesProfileTypeSlugMediaFileIdThumbnailGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListPublicCompaniesApiV1ContactsPublicCompaniesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/api/v1/contacts/public/companies';
};

export type ListPublicCompaniesApiV1ContactsPublicCompaniesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListPublicCompaniesApiV1ContactsPublicCompaniesGetError = ListPublicCompaniesApiV1ContactsPublicCompaniesGetErrors[keyof ListPublicCompaniesApiV1ContactsPublicCompaniesGetErrors];

export type ListPublicCompaniesApiV1ContactsPublicCompaniesGetResponses = {
    /**
     * Response List Public Companies Api V1 Contacts Public Companies Get
     * Successful Response
     */
    200: Array<CompanyResponse>;
};

export type ListPublicCompaniesApiV1ContactsPublicCompaniesGetResponse = ListPublicCompaniesApiV1ContactsPublicCompaniesGetResponses[keyof ListPublicCompaniesApiV1ContactsPublicCompaniesGetResponses];

export type GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetData = {
    body?: never;
    path: {
        /**
         * Slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/contacts/public/companies/{slug}';
};

export type GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetError = GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetErrors[keyof GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetErrors];

export type GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetResponses = {
    /**
     * Successful Response
     */
    200: CompanyResponse;
};

export type GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetResponse = GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetResponses[keyof GetPublicCompanyBySlugApiV1ContactsPublicCompaniesSlugGetResponses];

export type ListPublicPeopleApiV1ContactsPublicPeopleGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Search
         */
        search?: string | null;
    };
    url: '/api/v1/contacts/public/people';
};

export type ListPublicPeopleApiV1ContactsPublicPeopleGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListPublicPeopleApiV1ContactsPublicPeopleGetError = ListPublicPeopleApiV1ContactsPublicPeopleGetErrors[keyof ListPublicPeopleApiV1ContactsPublicPeopleGetErrors];

export type ListPublicPeopleApiV1ContactsPublicPeopleGetResponses = {
    /**
     * Response List Public People Api V1 Contacts Public People Get
     * Successful Response
     */
    200: Array<PersonResponse>;
};

export type ListPublicPeopleApiV1ContactsPublicPeopleGetResponse = ListPublicPeopleApiV1ContactsPublicPeopleGetResponses[keyof ListPublicPeopleApiV1ContactsPublicPeopleGetResponses];

export type GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetData = {
    body?: never;
    path: {
        /**
         * Slug
         */
        slug: string;
    };
    query?: never;
    url: '/api/v1/contacts/public/people/{slug}';
};

export type GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetError = GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetErrors[keyof GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetErrors];

export type GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetResponses = {
    /**
     * Successful Response
     */
    200: PersonResponse;
};

export type GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetResponse = GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetResponses[keyof GetPublicPersonBySlugApiV1ContactsPublicPeopleSlugGetResponses];

export type ListAssociationsApiV1ContactsAssociationsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Company Id
         * Filter by company ID
         */
        company_id?: number | null;
        /**
         * Person Id
         * Filter by person ID
         */
        person_id?: number | null;
        /**
         * Role
         * Filter by role
         */
        role?: string | null;
        /**
         * Is Primary
         * Filter by primary status
         */
        is_primary?: boolean | null;
        /**
         * Include Inactive
         * Include inactive associations
         */
        include_inactive?: boolean;
    };
    url: '/api/v1/contacts/associations';
};

export type ListAssociationsApiV1ContactsAssociationsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListAssociationsApiV1ContactsAssociationsGetError = ListAssociationsApiV1ContactsAssociationsGetErrors[keyof ListAssociationsApiV1ContactsAssociationsGetErrors];

export type ListAssociationsApiV1ContactsAssociationsGetResponses = {
    /**
     * Response List Associations Api V1 Contacts Associations Get
     * Successful Response
     */
    200: Array<CompanyPersonAssociationResponse>;
};

export type ListAssociationsApiV1ContactsAssociationsGetResponse = ListAssociationsApiV1ContactsAssociationsGetResponses[keyof ListAssociationsApiV1ContactsAssociationsGetResponses];

export type CreateAssociationApiV1ContactsAssociationsPostData = {
    body: CompanyPersonAssociationCreate;
    path?: never;
    query?: never;
    url: '/api/v1/contacts/associations';
};

export type CreateAssociationApiV1ContactsAssociationsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateAssociationApiV1ContactsAssociationsPostError = CreateAssociationApiV1ContactsAssociationsPostErrors[keyof CreateAssociationApiV1ContactsAssociationsPostErrors];

export type CreateAssociationApiV1ContactsAssociationsPostResponses = {
    /**
     * Successful Response
     */
    200: CompanyPersonAssociationResponse;
};

export type CreateAssociationApiV1ContactsAssociationsPostResponse = CreateAssociationApiV1ContactsAssociationsPostResponses[keyof CreateAssociationApiV1ContactsAssociationsPostResponses];

export type DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteData = {
    body?: never;
    path: {
        /**
         * Company Id
         */
        company_id: number;
        /**
         * Person Id
         */
        person_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/associations/{company_id}/{person_id}';
};

export type DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteError = DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteErrors[keyof DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteErrors];

export type DeleteAssociationApiV1ContactsAssociationsCompanyIdPersonIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutData = {
    body: CompanyPersonAssociationUpdate;
    path: {
        /**
         * Company Id
         */
        company_id: number;
        /**
         * Person Id
         */
        person_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/associations/{company_id}/{person_id}';
};

export type UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutError = UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutErrors[keyof UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutErrors];

export type UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutResponses = {
    /**
     * Successful Response
     */
    200: CompanyPersonAssociationResponse;
};

export type UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutResponse = UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutResponses[keyof UpdateAssociationApiV1ContactsAssociationsCompanyIdPersonIdPutResponses];

export type GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetData = {
    body?: never;
    path: {
        /**
         * Company Id
         */
        company_id: number;
    };
    query?: {
        /**
         * Include Inactive
         * Include inactive associations
         */
        include_inactive?: boolean;
    };
    url: '/api/v1/contacts/companies/{company_id}/people';
};

export type GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetError = GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetErrors[keyof GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetErrors];

export type GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetResponses = {
    /**
     * Response Get Company People Api V1 Contacts Companies  Company Id  People Get
     * Successful Response
     */
    200: Array<CompanyPersonAssociationResponse>;
};

export type GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetResponse = GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetResponses[keyof GetCompanyPeopleApiV1ContactsCompaniesCompanyIdPeopleGetResponses];

export type GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetData = {
    body?: never;
    path: {
        /**
         * Person Id
         */
        person_id: number;
    };
    query?: {
        /**
         * Include Inactive
         * Include inactive associations
         */
        include_inactive?: boolean;
    };
    url: '/api/v1/contacts/people/{person_id}/companies';
};

export type GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetError = GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetErrors[keyof GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetErrors];

export type GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetResponses = {
    /**
     * Response Get Person Companies Api V1 Contacts People  Person Id  Companies Get
     * Successful Response
     */
    200: Array<CompanyPersonAssociationResponse>;
};

export type GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetResponse = GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetResponses[keyof GetPersonCompaniesApiV1ContactsPeoplePersonIdCompaniesGetResponses];

export type ListPersonAddressesApiV1ContactsPeoplePersonIdAddressesGetData = {
    body?: never;
    path: {
        /**
         * Person Id
         */
        person_id: number;
    };
    query?: {
        /**
         * Current Only
         * Only return current addresses
         */
        current_only?: boolean;
    };
    url: '/api/v1/contacts/people/{person_id}/addresses';
};

export type ListPersonAddressesApiV1ContactsPeoplePersonIdAddressesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListPersonAddressesApiV1ContactsPeoplePersonIdAddressesGetError = ListPersonAddressesApiV1ContactsPeoplePersonIdAddressesGetErrors[keyof ListPersonAddressesApiV1ContactsPeoplePersonIdAddressesGetErrors];

export type ListPersonAddressesApiV1ContactsPeoplePersonIdAddressesGetResponses = {
    /**
     * Response List Person Addresses Api V1 Contacts People  Person Id  Addresses Get
     * Successful Response
     */
    200: Array<PersonAddressResponse>;
};

export type ListPersonAddressesApiV1ContactsPeoplePersonIdAddressesGetResponse = ListPersonAddressesApiV1ContactsPeoplePersonIdAddressesGetResponses[keyof ListPersonAddressesApiV1ContactsPeoplePersonIdAddressesGetResponses];

export type CreatePersonAddressApiV1ContactsPeoplePersonIdAddressesPostData = {
    body: PersonAddressCreate;
    path: {
        /**
         * Person Id
         */
        person_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/people/{person_id}/addresses';
};

export type CreatePersonAddressApiV1ContactsPeoplePersonIdAddressesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreatePersonAddressApiV1ContactsPeoplePersonIdAddressesPostError = CreatePersonAddressApiV1ContactsPeoplePersonIdAddressesPostErrors[keyof CreatePersonAddressApiV1ContactsPeoplePersonIdAddressesPostErrors];

export type CreatePersonAddressApiV1ContactsPeoplePersonIdAddressesPostResponses = {
    /**
     * Successful Response
     */
    200: PersonAddressResponse;
};

export type CreatePersonAddressApiV1ContactsPeoplePersonIdAddressesPostResponse = CreatePersonAddressApiV1ContactsPeoplePersonIdAddressesPostResponses[keyof CreatePersonAddressApiV1ContactsPeoplePersonIdAddressesPostResponses];

export type DeletePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdDeleteData = {
    body?: never;
    path: {
        /**
         * Person Id
         */
        person_id: number;
        /**
         * Address Id
         */
        address_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/people/{person_id}/addresses/{address_id}';
};

export type DeletePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeletePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdDeleteError = DeletePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdDeleteErrors[keyof DeletePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdDeleteErrors];

export type DeletePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdatePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdPutData = {
    body: PersonAddressUpdate;
    path: {
        /**
         * Person Id
         */
        person_id: number;
        /**
         * Address Id
         */
        address_id: number;
    };
    query?: never;
    url: '/api/v1/contacts/people/{person_id}/addresses/{address_id}';
};

export type UpdatePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdatePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdPutError = UpdatePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdPutErrors[keyof UpdatePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdPutErrors];

export type UpdatePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdPutResponses = {
    /**
     * Successful Response
     */
    200: PersonAddressResponse;
};

export type UpdatePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdPutResponse = UpdatePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdPutResponses[keyof UpdatePersonAddressApiV1ContactsPeoplePersonIdAddressesAddressIdPutResponses];

export type GetTagStatsApiV1TagsStatsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/tags/stats';
};

export type GetTagStatsApiV1TagsStatsGetResponses = {
    /**
     * Successful Response
     */
    200: TagStats;
};

export type GetTagStatsApiV1TagsStatsGetResponse = GetTagStatsApiV1TagsStatsGetResponses[keyof GetTagStatsApiV1TagsStatsGetResponses];

export type GetTagCloudApiV1TagsCloudGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Max Tags
         * Maximum number of tags to include
         */
        max_tags?: number;
    };
    url: '/api/v1/tags/cloud';
};

export type GetTagCloudApiV1TagsCloudGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTagCloudApiV1TagsCloudGetError = GetTagCloudApiV1TagsCloudGetErrors[keyof GetTagCloudApiV1TagsCloudGetErrors];

export type GetTagCloudApiV1TagsCloudGetResponses = {
    /**
     * Successful Response
     */
    200: TagCloudResponse;
};

export type GetTagCloudApiV1TagsCloudGetResponse = GetTagCloudApiV1TagsCloudGetResponses[keyof GetTagCloudApiV1TagsCloudGetResponses];

export type AutocompleteTagsApiV1TagsAutocompleteGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Q
         * Search query (minimum 2 characters)
         */
        q: string;
        /**
         * Limit
         * Maximum number of suggestions
         */
        limit?: number;
    };
    url: '/api/v1/tags/autocomplete';
};

export type AutocompleteTagsApiV1TagsAutocompleteGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AutocompleteTagsApiV1TagsAutocompleteGetError = AutocompleteTagsApiV1TagsAutocompleteGetErrors[keyof AutocompleteTagsApiV1TagsAutocompleteGetErrors];

export type AutocompleteTagsApiV1TagsAutocompleteGetResponses = {
    /**
     * Successful Response
     */
    200: TagAutocompleteResponse;
};

export type AutocompleteTagsApiV1TagsAutocompleteGetResponse = AutocompleteTagsApiV1TagsAutocompleteGetResponses[keyof AutocompleteTagsApiV1TagsAutocompleteGetResponses];

export type GetObjectTagsApiV1TagsObjectTagsGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Content Type
         * Content type in format 'app_label.model'
         */
        content_type: string;
        /**
         * Object Id
         * ID of the object
         */
        object_id: number;
    };
    url: '/api/v1/tags/object-tags';
};

export type GetObjectTagsApiV1TagsObjectTagsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetObjectTagsApiV1TagsObjectTagsGetError = GetObjectTagsApiV1TagsObjectTagsGetErrors[keyof GetObjectTagsApiV1TagsObjectTagsGetErrors];

export type GetObjectTagsApiV1TagsObjectTagsGetResponses = {
    /**
     * Successful Response
     */
    200: ObjectTagsResponse;
};

export type GetObjectTagsApiV1TagsObjectTagsGetResponse = GetObjectTagsApiV1TagsObjectTagsGetResponses[keyof GetObjectTagsApiV1TagsObjectTagsGetResponses];

export type ListTagsApiV1TagsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         * Number of records to skip
         */
        skip?: number;
        /**
         * Limit
         * Maximum number of records to return
         */
        limit?: number;
        /**
         * Search
         * Search query for tag names
         */
        search?: string | null;
    };
    url: '/api/v1/tags';
};

export type ListTagsApiV1TagsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListTagsApiV1TagsGetError = ListTagsApiV1TagsGetErrors[keyof ListTagsApiV1TagsGetErrors];

export type ListTagsApiV1TagsGetResponses = {
    /**
     * Successful Response
     */
    200: TagListResponse;
};

export type ListTagsApiV1TagsGetResponse = ListTagsApiV1TagsGetResponses[keyof ListTagsApiV1TagsGetResponses];

export type CreateTagApiV1TagsPostData = {
    body: TagCreate;
    path?: never;
    query?: never;
    url: '/api/v1/tags';
};

export type CreateTagApiV1TagsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateTagApiV1TagsPostError = CreateTagApiV1TagsPostErrors[keyof CreateTagApiV1TagsPostErrors];

export type CreateTagApiV1TagsPostResponses = {
    /**
     * Successful Response
     */
    200: TagResponse;
};

export type CreateTagApiV1TagsPostResponse = CreateTagApiV1TagsPostResponses[keyof CreateTagApiV1TagsPostResponses];

export type DeleteTagApiV1TagsTagIdDeleteData = {
    body?: never;
    path: {
        /**
         * Tag Id
         */
        tag_id: number;
    };
    query?: never;
    url: '/api/v1/tags/{tag_id}';
};

export type DeleteTagApiV1TagsTagIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteTagApiV1TagsTagIdDeleteError = DeleteTagApiV1TagsTagIdDeleteErrors[keyof DeleteTagApiV1TagsTagIdDeleteErrors];

export type DeleteTagApiV1TagsTagIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetTagApiV1TagsTagIdGetData = {
    body?: never;
    path: {
        /**
         * Tag Id
         */
        tag_id: number;
    };
    query?: never;
    url: '/api/v1/tags/{tag_id}';
};

export type GetTagApiV1TagsTagIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTagApiV1TagsTagIdGetError = GetTagApiV1TagsTagIdGetErrors[keyof GetTagApiV1TagsTagIdGetErrors];

export type GetTagApiV1TagsTagIdGetResponses = {
    /**
     * Successful Response
     */
    200: TagResponse;
};

export type GetTagApiV1TagsTagIdGetResponse = GetTagApiV1TagsTagIdGetResponses[keyof GetTagApiV1TagsTagIdGetResponses];

export type UpdateTagApiV1TagsTagIdPutData = {
    body: TagUpdate;
    path: {
        /**
         * Tag Id
         */
        tag_id: number;
    };
    query?: never;
    url: '/api/v1/tags/{tag_id}';
};

export type UpdateTagApiV1TagsTagIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateTagApiV1TagsTagIdPutError = UpdateTagApiV1TagsTagIdPutErrors[keyof UpdateTagApiV1TagsTagIdPutErrors];

export type UpdateTagApiV1TagsTagIdPutResponses = {
    /**
     * Successful Response
     */
    200: TagResponse;
};

export type UpdateTagApiV1TagsTagIdPutResponse = UpdateTagApiV1TagsTagIdPutResponses[keyof UpdateTagApiV1TagsTagIdPutResponses];

export type TagObjectApiV1TagsTagObjectPostData = {
    body: TagObjectRequest;
    path?: never;
    query?: never;
    url: '/api/v1/tags/tag-object';
};

export type TagObjectApiV1TagsTagObjectPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TagObjectApiV1TagsTagObjectPostError = TagObjectApiV1TagsTagObjectPostErrors[keyof TagObjectApiV1TagsTagObjectPostErrors];

export type TagObjectApiV1TagsTagObjectPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UntagObjectApiV1TagsUntagObjectDeleteData = {
    body: UntagObjectRequest;
    path?: never;
    query?: never;
    url: '/api/v1/tags/untag-object';
};

export type UntagObjectApiV1TagsUntagObjectDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UntagObjectApiV1TagsUntagObjectDeleteError = UntagObjectApiV1TagsUntagObjectDeleteErrors[keyof UntagObjectApiV1TagsUntagObjectDeleteErrors];

export type UntagObjectApiV1TagsUntagObjectDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetTaggedObjectsApiV1TagsTagSlugObjectsGetData = {
    body?: never;
    path: {
        /**
         * Tag Slug
         */
        tag_slug: string;
    };
    query?: {
        /**
         * Content Type
         * Filter by content type
         */
        content_type?: string | null;
        /**
         * Skip
         * Number of records to skip
         */
        skip?: number;
        /**
         * Limit
         * Maximum number of records to return
         */
        limit?: number;
    };
    url: '/api/v1/tags/{tag_slug}/objects';
};

export type GetTaggedObjectsApiV1TagsTagSlugObjectsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetTaggedObjectsApiV1TagsTagSlugObjectsGetError = GetTaggedObjectsApiV1TagsTagSlugObjectsGetErrors[keyof GetTaggedObjectsApiV1TagsTagSlugObjectsGetErrors];

export type GetTaggedObjectsApiV1TagsTagSlugObjectsGetResponses = {
    /**
     * Successful Response
     */
    200: TaggedObjectsResponse;
};

export type GetTaggedObjectsApiV1TagsTagSlugObjectsGetResponse = GetTaggedObjectsApiV1TagsTagSlugObjectsGetResponses[keyof GetTaggedObjectsApiV1TagsTagSlugObjectsGetResponses];

export type GetRelatedTagsApiV1TagsTagSlugRelatedGetData = {
    body?: never;
    path: {
        /**
         * Tag Slug
         */
        tag_slug: string;
    };
    query?: {
        /**
         * Limit
         * Maximum number of related tags
         */
        limit?: number;
    };
    url: '/api/v1/tags/{tag_slug}/related';
};

export type GetRelatedTagsApiV1TagsTagSlugRelatedGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRelatedTagsApiV1TagsTagSlugRelatedGetError = GetRelatedTagsApiV1TagsTagSlugRelatedGetErrors[keyof GetRelatedTagsApiV1TagsTagSlugRelatedGetErrors];

export type GetRelatedTagsApiV1TagsTagSlugRelatedGetResponses = {
    /**
     * Response Get Related Tags Api V1 Tags  Tag Slug  Related Get
     * Successful Response
     */
    200: Array<TagResponse>;
};

export type GetRelatedTagsApiV1TagsTagSlugRelatedGetResponse = GetRelatedTagsApiV1TagsTagSlugRelatedGetResponses[keyof GetRelatedTagsApiV1TagsTagSlugRelatedGetResponses];

export type BulkCreateTagsApiV1TagsBulkCreatePostData = {
    body: BulkTagRequest;
    path?: never;
    query?: never;
    url: '/api/v1/tags/bulk-create';
};

export type BulkCreateTagsApiV1TagsBulkCreatePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BulkCreateTagsApiV1TagsBulkCreatePostError = BulkCreateTagsApiV1TagsBulkCreatePostErrors[keyof BulkCreateTagsApiV1TagsBulkCreatePostErrors];

export type BulkCreateTagsApiV1TagsBulkCreatePostResponses = {
    /**
     * Successful Response
     */
    200: BulkTagResponse;
};

export type BulkCreateTagsApiV1TagsBulkCreatePostResponse = BulkCreateTagsApiV1TagsBulkCreatePostResponses[keyof BulkCreateTagsApiV1TagsBulkCreatePostResponses];

export type BulkDeleteTagsApiV1TagsBulkDeleteDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Tag Ids
         * List of tag IDs to delete
         */
        tag_ids: Array<number>;
    };
    url: '/api/v1/tags/bulk-delete';
};

export type BulkDeleteTagsApiV1TagsBulkDeleteDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BulkDeleteTagsApiV1TagsBulkDeleteDeleteError = BulkDeleteTagsApiV1TagsBulkDeleteDeleteErrors[keyof BulkDeleteTagsApiV1TagsBulkDeleteDeleteErrors];

export type BulkDeleteTagsApiV1TagsBulkDeleteDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListImagesApiV1ImagesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Tags
         * Filter by tags (comma-separated)
         */
        tags?: string | null;
        /**
         * User Profile Id
         * Filter by user profile ID
         */
        user_profile_id?: number | null;
    };
    url: '/api/v1/images';
};

export type ListImagesApiV1ImagesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListImagesApiV1ImagesGetError = ListImagesApiV1ImagesGetErrors[keyof ListImagesApiV1ImagesGetErrors];

export type ListImagesApiV1ImagesGetResponses = {
    /**
     * Response List Images Api V1 Images Get
     * Successful Response
     */
    200: Array<ImageResponse>;
};

export type ListImagesApiV1ImagesGetResponse = ListImagesApiV1ImagesGetResponses[keyof ListImagesApiV1ImagesGetResponses];

export type CreateImageApiV1ImagesPostData = {
    body: ImageCreate;
    path?: never;
    query?: never;
    url: '/api/v1/images';
};

export type CreateImageApiV1ImagesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateImageApiV1ImagesPostError = CreateImageApiV1ImagesPostErrors[keyof CreateImageApiV1ImagesPostErrors];

export type CreateImageApiV1ImagesPostResponses = {
    /**
     * Successful Response
     */
    200: ImageResponse;
};

export type CreateImageApiV1ImagesPostResponse = CreateImageApiV1ImagesPostResponses[keyof CreateImageApiV1ImagesPostResponses];

export type DeleteImageApiV1ImagesImageIdDeleteData = {
    body?: never;
    path: {
        /**
         * Image Id
         */
        image_id: number;
    };
    query?: never;
    url: '/api/v1/images/{image_id}';
};

export type DeleteImageApiV1ImagesImageIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteImageApiV1ImagesImageIdDeleteError = DeleteImageApiV1ImagesImageIdDeleteErrors[keyof DeleteImageApiV1ImagesImageIdDeleteErrors];

export type DeleteImageApiV1ImagesImageIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetImageApiV1ImagesImageIdGetData = {
    body?: never;
    path: {
        /**
         * Image Id
         */
        image_id: number;
    };
    query?: never;
    url: '/api/v1/images/{image_id}';
};

export type GetImageApiV1ImagesImageIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetImageApiV1ImagesImageIdGetError = GetImageApiV1ImagesImageIdGetErrors[keyof GetImageApiV1ImagesImageIdGetErrors];

export type GetImageApiV1ImagesImageIdGetResponses = {
    /**
     * Successful Response
     */
    200: ImageResponse;
};

export type GetImageApiV1ImagesImageIdGetResponse = GetImageApiV1ImagesImageIdGetResponses[keyof GetImageApiV1ImagesImageIdGetResponses];

export type UpdateImageApiV1ImagesImageIdPutData = {
    body: ImageUpdate;
    path: {
        /**
         * Image Id
         */
        image_id: number;
    };
    query?: never;
    url: '/api/v1/images/{image_id}';
};

export type UpdateImageApiV1ImagesImageIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateImageApiV1ImagesImageIdPutError = UpdateImageApiV1ImagesImageIdPutErrors[keyof UpdateImageApiV1ImagesImageIdPutErrors];

export type UpdateImageApiV1ImagesImageIdPutResponses = {
    /**
     * Successful Response
     */
    200: ImageResponse;
};

export type UpdateImageApiV1ImagesImageIdPutResponse = UpdateImageApiV1ImagesImageIdPutResponses[keyof UpdateImageApiV1ImagesImageIdPutResponses];

export type BulkUploadImagesApiV1ImagesBulkUploadPostData = {
    /**
     * Image Payloads
     */
    body: Array<ImageCreate>;
    path?: never;
    query?: {
        /**
         * Gallery Id
         */
        gallery_id?: number | null;
        /**
         * Generate Thumbnails
         */
        generate_thumbnails?: boolean;
    };
    url: '/api/v1/images/bulk-upload';
};

export type BulkUploadImagesApiV1ImagesBulkUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BulkUploadImagesApiV1ImagesBulkUploadPostError = BulkUploadImagesApiV1ImagesBulkUploadPostErrors[keyof BulkUploadImagesApiV1ImagesBulkUploadPostErrors];

export type BulkUploadImagesApiV1ImagesBulkUploadPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type BulkTagImagesApiV1ImagesBulkTagPostData = {
    body: BodyBulkTagImagesApiV1ImagesBulkTagPost;
    path?: never;
    query?: never;
    url: '/api/v1/images/bulk-tag';
};

export type BulkTagImagesApiV1ImagesBulkTagPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type BulkTagImagesApiV1ImagesBulkTagPostError = BulkTagImagesApiV1ImagesBulkTagPostErrors[keyof BulkTagImagesApiV1ImagesBulkTagPostErrors];

export type BulkTagImagesApiV1ImagesBulkTagPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostData = {
    body?: never;
    path: {
        /**
         * Image Id
         */
        image_id: number;
    };
    query?: never;
    url: '/api/v1/images/{image_id}/regenerate-thumbnails';
};

export type RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostError = RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostErrors[keyof RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostErrors];

export type RegenerateThumbnailsApiV1ImagesImageIdRegenerateThumbnailsPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetImageMetadataApiV1ImagesImageIdMetadataGetData = {
    body?: never;
    path: {
        /**
         * Image Id
         */
        image_id: number;
    };
    query?: never;
    url: '/api/v1/images/{image_id}/metadata';
};

export type GetImageMetadataApiV1ImagesImageIdMetadataGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetImageMetadataApiV1ImagesImageIdMetadataGetError = GetImageMetadataApiV1ImagesImageIdMetadataGetErrors[keyof GetImageMetadataApiV1ImagesImageIdMetadataGetErrors];

export type GetImageMetadataApiV1ImagesImageIdMetadataGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetImageStatsApiV1ImagesAdminStatsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/images/admin/stats';
};

export type GetImageStatsApiV1ImagesAdminStatsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ListConnectionsApiV1EmailConnectionsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/email-connections';
};

export type ListConnectionsApiV1EmailConnectionsGetErrors = {
    /**
     * Authentication required
     */
    401: unknown;
};

export type ListConnectionsApiV1EmailConnectionsGetResponses = {
    /**
     * List of email connections with summary statistics
     */
    200: ConnectionListResponse;
};

export type ListConnectionsApiV1EmailConnectionsGetResponse = ListConnectionsApiV1EmailConnectionsGetResponses[keyof ListConnectionsApiV1EmailConnectionsGetResponses];

export type DeleteConnectionApiV1EmailConnectionsConnectionIdDeleteData = {
    body?: never;
    path: {
        /**
         * Connection Id
         */
        connection_id: number;
    };
    query?: never;
    url: '/api/v1/email-connections/{connection_id}';
};

export type DeleteConnectionApiV1EmailConnectionsConnectionIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteConnectionApiV1EmailConnectionsConnectionIdDeleteError = DeleteConnectionApiV1EmailConnectionsConnectionIdDeleteErrors[keyof DeleteConnectionApiV1EmailConnectionsConnectionIdDeleteErrors];

export type DeleteConnectionApiV1EmailConnectionsConnectionIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: ConnectionDeleteResponse;
};

export type DeleteConnectionApiV1EmailConnectionsConnectionIdDeleteResponse = DeleteConnectionApiV1EmailConnectionsConnectionIdDeleteResponses[keyof DeleteConnectionApiV1EmailConnectionsConnectionIdDeleteResponses];

export type GetConnectionApiV1EmailConnectionsConnectionIdGetData = {
    body?: never;
    path: {
        /**
         * Connection Id
         */
        connection_id: number;
    };
    query?: never;
    url: '/api/v1/email-connections/{connection_id}';
};

export type GetConnectionApiV1EmailConnectionsConnectionIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetConnectionApiV1EmailConnectionsConnectionIdGetError = GetConnectionApiV1EmailConnectionsConnectionIdGetErrors[keyof GetConnectionApiV1EmailConnectionsConnectionIdGetErrors];

export type GetConnectionApiV1EmailConnectionsConnectionIdGetResponses = {
    /**
     * Successful Response
     */
    200: EmailConnectionResponse;
};

export type GetConnectionApiV1EmailConnectionsConnectionIdGetResponse = GetConnectionApiV1EmailConnectionsConnectionIdGetResponses[keyof GetConnectionApiV1EmailConnectionsConnectionIdGetResponses];

export type UpdateConnectionApiV1EmailConnectionsConnectionIdPutData = {
    body: EmailConnectionUpdate;
    path: {
        /**
         * Connection Id
         */
        connection_id: number;
    };
    query?: never;
    url: '/api/v1/email-connections/{connection_id}';
};

export type UpdateConnectionApiV1EmailConnectionsConnectionIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateConnectionApiV1EmailConnectionsConnectionIdPutError = UpdateConnectionApiV1EmailConnectionsConnectionIdPutErrors[keyof UpdateConnectionApiV1EmailConnectionsConnectionIdPutErrors];

export type UpdateConnectionApiV1EmailConnectionsConnectionIdPutResponses = {
    /**
     * Successful Response
     */
    200: EmailConnectionResponse;
};

export type UpdateConnectionApiV1EmailConnectionsConnectionIdPutResponse = UpdateConnectionApiV1EmailConnectionsConnectionIdPutResponses[keyof UpdateConnectionApiV1EmailConnectionsConnectionIdPutResponses];

export type CheckConnectionHealthApiV1EmailConnectionsConnectionIdHealthGetData = {
    body?: never;
    path: {
        /**
         * Connection Id
         */
        connection_id: number;
    };
    query?: never;
    url: '/api/v1/email-connections/{connection_id}/health';
};

export type CheckConnectionHealthApiV1EmailConnectionsConnectionIdHealthGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CheckConnectionHealthApiV1EmailConnectionsConnectionIdHealthGetError = CheckConnectionHealthApiV1EmailConnectionsConnectionIdHealthGetErrors[keyof CheckConnectionHealthApiV1EmailConnectionsConnectionIdHealthGetErrors];

export type CheckConnectionHealthApiV1EmailConnectionsConnectionIdHealthGetResponses = {
    /**
     * Successful Response
     */
    200: ConnectionHealthCheck;
};

export type CheckConnectionHealthApiV1EmailConnectionsConnectionIdHealthGetResponse = CheckConnectionHealthApiV1EmailConnectionsConnectionIdHealthGetResponses[keyof CheckConnectionHealthApiV1EmailConnectionsConnectionIdHealthGetResponses];

export type GetConnectionStatusApiV1EmailConnectionsStatusGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/email-connections/status';
};

export type GetConnectionStatusApiV1EmailConnectionsStatusGetResponses = {
    /**
     * Successful Response
     */
    200: BulkConnectionStatus;
};

export type GetConnectionStatusApiV1EmailConnectionsStatusGetResponse = GetConnectionStatusApiV1EmailConnectionsStatusGetResponses[keyof GetConnectionStatusApiV1EmailConnectionsStatusGetResponses];

export type InitiateOauthFlowApiV1EmailConnectionsOauthInitiatePostData = {
    body: OAuthInitiateRequest;
    path?: never;
    query?: never;
    url: '/api/v1/email-connections/oauth/initiate';
};

export type InitiateOauthFlowApiV1EmailConnectionsOauthInitiatePostErrors = {
    /**
     * Invalid request parameters
     */
    400: unknown;
    /**
     * Authentication required
     */
    401: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type InitiateOauthFlowApiV1EmailConnectionsOauthInitiatePostError = InitiateOauthFlowApiV1EmailConnectionsOauthInitiatePostErrors[keyof InitiateOauthFlowApiV1EmailConnectionsOauthInitiatePostErrors];

export type InitiateOauthFlowApiV1EmailConnectionsOauthInitiatePostResponses = {
    /**
     * OAuth authorization URL generated successfully
     */
    200: OAuthInitiateResponse;
};

export type InitiateOauthFlowApiV1EmailConnectionsOauthInitiatePostResponse = InitiateOauthFlowApiV1EmailConnectionsOauthInitiatePostResponses[keyof InitiateOauthFlowApiV1EmailConnectionsOauthInitiatePostResponses];

export type HandleOauthCallbackApiV1EmailConnectionsOauthCallbackGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * State
         */
        state: string;
        /**
         * Code
         */
        code: string;
        /**
         * Scope
         */
        scope?: string;
    };
    url: '/api/v1/email-connections/oauth/callback';
};

export type HandleOauthCallbackApiV1EmailConnectionsOauthCallbackGetErrors = {
    /**
     * Invalid OAuth state or authorization code
     */
    400: unknown;
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Failed to create connection or exchange tokens
     */
    500: unknown;
};

export type HandleOauthCallbackApiV1EmailConnectionsOauthCallbackGetError = HandleOauthCallbackApiV1EmailConnectionsOauthCallbackGetErrors[keyof HandleOauthCallbackApiV1EmailConnectionsOauthCallbackGetErrors];

export type HandleOauthCallbackApiV1EmailConnectionsOauthCallbackGetResponses = {
    /**
     * OAuth callback processed successfully - returns HTML page that closes popup
     */
    200: unknown;
};

export type RefreshConnectionTokensApiV1EmailConnectionsConnectionIdRefreshPostData = {
    body?: never;
    path: {
        /**
         * Connection Id
         */
        connection_id: number;
    };
    query?: never;
    url: '/api/v1/email-connections/{connection_id}/refresh';
};

export type RefreshConnectionTokensApiV1EmailConnectionsConnectionIdRefreshPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RefreshConnectionTokensApiV1EmailConnectionsConnectionIdRefreshPostError = RefreshConnectionTokensApiV1EmailConnectionsConnectionIdRefreshPostErrors[keyof RefreshConnectionTokensApiV1EmailConnectionsConnectionIdRefreshPostErrors];

export type RefreshConnectionTokensApiV1EmailConnectionsConnectionIdRefreshPostResponses = {
    /**
     * Successful Response
     */
    200: EmailConnectionsSchemasTokenRefreshResponse;
};

export type RefreshConnectionTokensApiV1EmailConnectionsConnectionIdRefreshPostResponse = RefreshConnectionTokensApiV1EmailConnectionsConnectionIdRefreshPostResponses[keyof RefreshConnectionTokensApiV1EmailConnectionsConnectionIdRefreshPostResponses];

export type DebugConnectionScopesApiV1EmailConnectionsConnectionIdDebugGetData = {
    body?: never;
    path: {
        /**
         * Connection Id
         */
        connection_id: number;
    };
    query?: never;
    url: '/api/v1/email-connections/{connection_id}/debug';
};

export type DebugConnectionScopesApiV1EmailConnectionsConnectionIdDebugGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DebugConnectionScopesApiV1EmailConnectionsConnectionIdDebugGetError = DebugConnectionScopesApiV1EmailConnectionsConnectionIdDebugGetErrors[keyof DebugConnectionScopesApiV1EmailConnectionsConnectionIdDebugGetErrors];

export type DebugConnectionScopesApiV1EmailConnectionsConnectionIdDebugGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TestConnectionApiV1EmailConnectionsConnectionIdTestPostData = {
    body?: never;
    path: {
        /**
         * Connection Id
         */
        connection_id: number;
    };
    query?: never;
    url: '/api/v1/email-connections/{connection_id}/test';
};

export type TestConnectionApiV1EmailConnectionsConnectionIdTestPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type TestConnectionApiV1EmailConnectionsConnectionIdTestPostError = TestConnectionApiV1EmailConnectionsConnectionIdTestPostErrors[keyof TestConnectionApiV1EmailConnectionsConnectionIdTestPostErrors];

export type TestConnectionApiV1EmailConnectionsConnectionIdTestPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DebugHealthCheckApiV1EmailConnectionsDebugHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/email-connections/debug/health';
};

export type DebugHealthCheckApiV1EmailConnectionsDebugHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type DebugTestErrorApiV1EmailConnectionsDebugTestErrorErrorTypeGetData = {
    body?: never;
    path: {
        /**
         * Error Type
         */
        error_type: string;
    };
    query?: never;
    url: '/api/v1/email-connections/debug/test-error/{error_type}';
};

export type DebugTestErrorApiV1EmailConnectionsDebugTestErrorErrorTypeGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DebugTestErrorApiV1EmailConnectionsDebugTestErrorErrorTypeGetError = DebugTestErrorApiV1EmailConnectionsDebugTestErrorErrorTypeGetErrors[keyof DebugTestErrorApiV1EmailConnectionsDebugTestErrorErrorTypeGetErrors];

export type DebugTestErrorApiV1EmailConnectionsDebugTestErrorErrorTypeGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type TestHarvestingCapabilityApiV1EmailConnectionsHarvestTestPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/email-connections/harvest/test';
};

export type TestHarvestingCapabilityApiV1EmailConnectionsHarvestTestPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HarvestEmailsForCaseApiV1EmailConnectionsHarvestCaseCaseIdPostData = {
    /**
     * Connection Ids
     */
    body?: Array<number> | null;
    path: {
        /**
         * Case Id
         */
        case_id: number;
    };
    query?: {
        /**
         * Max Messages Per Connection
         */
        max_messages_per_connection?: number;
        /**
         * Search Query
         */
        search_query?: string | null;
    };
    url: '/api/v1/email-connections/harvest/case/{case_id}';
};

export type HarvestEmailsForCaseApiV1EmailConnectionsHarvestCaseCaseIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type HarvestEmailsForCaseApiV1EmailConnectionsHarvestCaseCaseIdPostError = HarvestEmailsForCaseApiV1EmailConnectionsHarvestCaseCaseIdPostErrors[keyof HarvestEmailsForCaseApiV1EmailConnectionsHarvestCaseCaseIdPostErrors];

export type HarvestEmailsForCaseApiV1EmailConnectionsHarvestCaseCaseIdPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetHarvestingStatsApiV1EmailConnectionsHarvestStatsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Case Id
         */
        case_id?: number | null;
    };
    url: '/api/v1/email-connections/harvest/stats';
};

export type GetHarvestingStatsApiV1EmailConnectionsHarvestStatsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetHarvestingStatsApiV1EmailConnectionsHarvestStatsGetError = GetHarvestingStatsApiV1EmailConnectionsHarvestStatsGetErrors[keyof GetHarvestingStatsApiV1EmailConnectionsHarvestStatsGetErrors];

export type GetHarvestingStatsApiV1EmailConnectionsHarvestStatsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetDashboardApiV1CasesDashboardGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/cases/dashboard';
};

export type GetDashboardApiV1CasesDashboardGetResponses = {
    /**
     * Successful Response
     */
    200: CaseDashboard;
};

export type GetDashboardApiV1CasesDashboardGetResponse = GetDashboardApiV1CasesDashboardGetResponses[keyof GetDashboardApiV1CasesDashboardGetResponses];

export type GetCasesApiV1CasesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Q
         */
        q?: string | null;
        /**
         * Case Type
         */
        case_type?: string | null;
        /**
         * Status
         */
        status?: string | null;
        /**
         * Court Location
         */
        court_location?: string | null;
        /**
         * From Date
         */
        from_date?: string | null;
        /**
         * To Date
         */
        to_date?: string | null;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/api/v1/cases';
};

export type GetCasesApiV1CasesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCasesApiV1CasesGetError = GetCasesApiV1CasesGetErrors[keyof GetCasesApiV1CasesGetErrors];

export type GetCasesApiV1CasesGetResponses = {
    /**
     * Response Get Cases Api V1 Cases Get
     * Successful Response
     */
    200: Array<CaseWithProfileResponse>;
};

export type GetCasesApiV1CasesGetResponse = GetCasesApiV1CasesGetResponses[keyof GetCasesApiV1CasesGetResponses];

export type CreateCaseApiV1CasesPostData = {
    body: CaseCreate;
    path?: never;
    query?: never;
    url: '/api/v1/cases';
};

export type CreateCaseApiV1CasesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCaseApiV1CasesPostError = CreateCaseApiV1CasesPostErrors[keyof CreateCaseApiV1CasesPostErrors];

export type CreateCaseApiV1CasesPostResponses = {
    /**
     * Successful Response
     */
    201: CaseWithProfileResponse;
};

export type CreateCaseApiV1CasesPostResponse = CreateCaseApiV1CasesPostResponses[keyof CreateCaseApiV1CasesPostResponses];

export type DeleteCaseApiV1CasesCaseIdDeleteData = {
    body?: never;
    path: {
        /**
         * Case Id
         */
        case_id: number;
    };
    query?: never;
    url: '/api/v1/cases/{case_id}';
};

export type DeleteCaseApiV1CasesCaseIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCaseApiV1CasesCaseIdDeleteError = DeleteCaseApiV1CasesCaseIdDeleteErrors[keyof DeleteCaseApiV1CasesCaseIdDeleteErrors];

export type DeleteCaseApiV1CasesCaseIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteCaseApiV1CasesCaseIdDeleteResponse = DeleteCaseApiV1CasesCaseIdDeleteResponses[keyof DeleteCaseApiV1CasesCaseIdDeleteResponses];

export type GetCaseApiV1CasesCaseIdGetData = {
    body?: never;
    path: {
        /**
         * Case Id
         */
        case_id: number;
    };
    query?: never;
    url: '/api/v1/cases/{case_id}';
};

export type GetCaseApiV1CasesCaseIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCaseApiV1CasesCaseIdGetError = GetCaseApiV1CasesCaseIdGetErrors[keyof GetCaseApiV1CasesCaseIdGetErrors];

export type GetCaseApiV1CasesCaseIdGetResponses = {
    /**
     * Successful Response
     */
    200: CaseWithProfileResponse;
};

export type GetCaseApiV1CasesCaseIdGetResponse = GetCaseApiV1CasesCaseIdGetResponses[keyof GetCaseApiV1CasesCaseIdGetResponses];

export type UpdateCaseApiV1CasesCaseIdPutData = {
    body: CaseUpdate;
    path: {
        /**
         * Case Id
         */
        case_id: number;
    };
    query?: never;
    url: '/api/v1/cases/{case_id}';
};

export type UpdateCaseApiV1CasesCaseIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCaseApiV1CasesCaseIdPutError = UpdateCaseApiV1CasesCaseIdPutErrors[keyof UpdateCaseApiV1CasesCaseIdPutErrors];

export type UpdateCaseApiV1CasesCaseIdPutResponses = {
    /**
     * Successful Response
     */
    200: CaseWithProfileResponse;
};

export type UpdateCaseApiV1CasesCaseIdPutResponse = UpdateCaseApiV1CasesCaseIdPutResponses[keyof UpdateCaseApiV1CasesCaseIdPutResponses];

export type GetCaseFullApiV1CasesCaseIdFullGetData = {
    body?: never;
    path: {
        /**
         * Case Id
         */
        case_id: number;
    };
    query?: never;
    url: '/api/v1/cases/{case_id}/full';
};

export type GetCaseFullApiV1CasesCaseIdFullGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCaseFullApiV1CasesCaseIdFullGetError = GetCaseFullApiV1CasesCaseIdFullGetErrors[keyof GetCaseFullApiV1CasesCaseIdFullGetErrors];

export type GetCaseFullApiV1CasesCaseIdFullGetResponses = {
    /**
     * Successful Response
     */
    200: CaseFullResponse;
};

export type GetCaseFullApiV1CasesCaseIdFullGetResponse = GetCaseFullApiV1CasesCaseIdFullGetResponses[keyof GetCaseFullApiV1CasesCaseIdFullGetResponses];

export type GetCaseProfileApiV1CasesCaseIdProfileGetData = {
    body?: never;
    path: {
        /**
         * Case Id
         */
        case_id: number;
    };
    query?: never;
    url: '/api/v1/cases/{case_id}/profile';
};

export type GetCaseProfileApiV1CasesCaseIdProfileGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCaseProfileApiV1CasesCaseIdProfileGetError = GetCaseProfileApiV1CasesCaseIdProfileGetErrors[keyof GetCaseProfileApiV1CasesCaseIdProfileGetErrors];

export type GetCaseProfileApiV1CasesCaseIdProfileGetResponses = {
    /**
     * Successful Response
     */
    200: CaseProfileResponse;
};

export type GetCaseProfileApiV1CasesCaseIdProfileGetResponse = GetCaseProfileApiV1CasesCaseIdProfileGetResponses[keyof GetCaseProfileApiV1CasesCaseIdProfileGetResponses];

export type CreateCaseProfileApiV1CasesCaseIdProfilePostData = {
    body: CaseProfileCreate;
    path: {
        /**
         * Case Id
         */
        case_id: number;
    };
    query?: never;
    url: '/api/v1/cases/{case_id}/profile';
};

export type CreateCaseProfileApiV1CasesCaseIdProfilePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCaseProfileApiV1CasesCaseIdProfilePostError = CreateCaseProfileApiV1CasesCaseIdProfilePostErrors[keyof CreateCaseProfileApiV1CasesCaseIdProfilePostErrors];

export type CreateCaseProfileApiV1CasesCaseIdProfilePostResponses = {
    /**
     * Successful Response
     */
    201: CaseProfileResponse;
};

export type CreateCaseProfileApiV1CasesCaseIdProfilePostResponse = CreateCaseProfileApiV1CasesCaseIdProfilePostResponses[keyof CreateCaseProfileApiV1CasesCaseIdProfilePostResponses];

export type CreateCourtEventApiV1CasesEventsPostData = {
    body: CourtEventCreate;
    path?: never;
    query?: never;
    url: '/api/v1/cases/events';
};

export type CreateCourtEventApiV1CasesEventsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCourtEventApiV1CasesEventsPostError = CreateCourtEventApiV1CasesEventsPostErrors[keyof CreateCourtEventApiV1CasesEventsPostErrors];

export type CreateCourtEventApiV1CasesEventsPostResponses = {
    /**
     * Successful Response
     */
    201: CourtEventResponse;
};

export type CreateCourtEventApiV1CasesEventsPostResponse = CreateCourtEventApiV1CasesEventsPostResponses[keyof CreateCourtEventApiV1CasesEventsPostResponses];

export type GetCourtEventsApiV1CasesCaseIdEventsGetData = {
    body?: never;
    path: {
        /**
         * Case Id
         */
        case_id: number;
    };
    query?: never;
    url: '/api/v1/cases/{case_id}/events';
};

export type GetCourtEventsApiV1CasesCaseIdEventsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCourtEventsApiV1CasesCaseIdEventsGetError = GetCourtEventsApiV1CasesCaseIdEventsGetErrors[keyof GetCourtEventsApiV1CasesCaseIdEventsGetErrors];

export type GetCourtEventsApiV1CasesCaseIdEventsGetResponses = {
    /**
     * Response Get Court Events Api V1 Cases  Case Id  Events Get
     * Successful Response
     */
    200: Array<CourtEventResponse>;
};

export type GetCourtEventsApiV1CasesCaseIdEventsGetResponse = GetCourtEventsApiV1CasesCaseIdEventsGetResponses[keyof GetCourtEventsApiV1CasesCaseIdEventsGetResponses];

export type UpdateCourtEventApiV1CasesEventsEventIdPutData = {
    body: CourtEventUpdate;
    path: {
        /**
         * Event Id
         */
        event_id: number;
    };
    query?: never;
    url: '/api/v1/cases/events/{event_id}';
};

export type UpdateCourtEventApiV1CasesEventsEventIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCourtEventApiV1CasesEventsEventIdPutError = UpdateCourtEventApiV1CasesEventsEventIdPutErrors[keyof UpdateCourtEventApiV1CasesEventsEventIdPutErrors];

export type UpdateCourtEventApiV1CasesEventsEventIdPutResponses = {
    /**
     * Successful Response
     */
    200: CourtEventResponse;
};

export type UpdateCourtEventApiV1CasesEventsEventIdPutResponse = UpdateCourtEventApiV1CasesEventsEventIdPutResponses[keyof UpdateCourtEventApiV1CasesEventsEventIdPutResponses];

export type UploadDocumentApiV1CasesCaseIdDocumentsUploadPostData = {
    body: BodyUploadDocumentApiV1CasesCaseIdDocumentsUploadPost;
    path: {
        /**
         * Case Id
         */
        case_id: number;
    };
    query?: never;
    url: '/api/v1/cases/{case_id}/documents/upload';
};

export type UploadDocumentApiV1CasesCaseIdDocumentsUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadDocumentApiV1CasesCaseIdDocumentsUploadPostError = UploadDocumentApiV1CasesCaseIdDocumentsUploadPostErrors[keyof UploadDocumentApiV1CasesCaseIdDocumentsUploadPostErrors];

export type UploadDocumentApiV1CasesCaseIdDocumentsUploadPostResponses = {
    /**
     * Successful Response
     */
    200: CasesSchemasFileUploadResponse;
};

export type UploadDocumentApiV1CasesCaseIdDocumentsUploadPostResponse = UploadDocumentApiV1CasesCaseIdDocumentsUploadPostResponses[keyof UploadDocumentApiV1CasesCaseIdDocumentsUploadPostResponses];

export type GetDocumentsApiV1CasesCaseIdDocumentsGetData = {
    body?: never;
    path: {
        /**
         * Case Id
         */
        case_id: number;
    };
    query?: {
        /**
         * Q
         */
        q?: string | null;
        /**
         * Party Type
         */
        party_type?: string | null;
        /**
         * Document Type
         */
        document_type?: string | null;
        /**
         * From Date
         */
        from_date?: string | null;
        /**
         * To Date
         */
        to_date?: string | null;
        /**
         * Has Service
         */
        has_service?: boolean | null;
        /**
         * Service Status
         */
        service_status?: string | null;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/api/v1/cases/{case_id}/documents';
};

export type GetDocumentsApiV1CasesCaseIdDocumentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDocumentsApiV1CasesCaseIdDocumentsGetError = GetDocumentsApiV1CasesCaseIdDocumentsGetErrors[keyof GetDocumentsApiV1CasesCaseIdDocumentsGetErrors];

export type GetDocumentsApiV1CasesCaseIdDocumentsGetResponses = {
    /**
     * Response Get Documents Api V1 Cases  Case Id  Documents Get
     * Successful Response
     */
    200: Array<CaseDocumentResponse>;
};

export type GetDocumentsApiV1CasesCaseIdDocumentsGetResponse = GetDocumentsApiV1CasesCaseIdDocumentsGetResponses[keyof GetDocumentsApiV1CasesCaseIdDocumentsGetResponses];

export type DownloadDocumentApiV1CasesDocumentsDocumentIdDownloadGetData = {
    body?: never;
    path: {
        /**
         * Document Id
         */
        document_id: number;
    };
    query?: never;
    url: '/api/v1/cases/documents/{document_id}/download';
};

export type DownloadDocumentApiV1CasesDocumentsDocumentIdDownloadGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadDocumentApiV1CasesDocumentsDocumentIdDownloadGetError = DownloadDocumentApiV1CasesDocumentsDocumentIdDownloadGetErrors[keyof DownloadDocumentApiV1CasesDocumentsDocumentIdDownloadGetErrors];

export type DownloadDocumentApiV1CasesDocumentsDocumentIdDownloadGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetDocumentServicesApiV1CasesDocumentsDocumentIdServiceGetData = {
    body?: never;
    path: {
        /**
         * Document Id
         */
        document_id: number;
    };
    query?: never;
    url: '/api/v1/cases/documents/{document_id}/service';
};

export type GetDocumentServicesApiV1CasesDocumentsDocumentIdServiceGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDocumentServicesApiV1CasesDocumentsDocumentIdServiceGetError = GetDocumentServicesApiV1CasesDocumentsDocumentIdServiceGetErrors[keyof GetDocumentServicesApiV1CasesDocumentsDocumentIdServiceGetErrors];

export type GetDocumentServicesApiV1CasesDocumentsDocumentIdServiceGetResponses = {
    /**
     * Response Get Document Services Api V1 Cases Documents  Document Id  Service Get
     * Successful Response
     */
    200: Array<DocumentServiceResponse>;
};

export type GetDocumentServicesApiV1CasesDocumentsDocumentIdServiceGetResponse = GetDocumentServicesApiV1CasesDocumentsDocumentIdServiceGetResponses[keyof GetDocumentServicesApiV1CasesDocumentsDocumentIdServiceGetResponses];

export type CreateDocumentServiceApiV1CasesDocumentsDocumentIdServicePostData = {
    body: DocumentServiceCreate;
    path: {
        /**
         * Document Id
         */
        document_id: number;
    };
    query?: never;
    url: '/api/v1/cases/documents/{document_id}/service';
};

export type CreateDocumentServiceApiV1CasesDocumentsDocumentIdServicePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateDocumentServiceApiV1CasesDocumentsDocumentIdServicePostError = CreateDocumentServiceApiV1CasesDocumentsDocumentIdServicePostErrors[keyof CreateDocumentServiceApiV1CasesDocumentsDocumentIdServicePostErrors];

export type CreateDocumentServiceApiV1CasesDocumentsDocumentIdServicePostResponses = {
    /**
     * Successful Response
     */
    201: DocumentServiceResponse;
};

export type CreateDocumentServiceApiV1CasesDocumentsDocumentIdServicePostResponse = CreateDocumentServiceApiV1CasesDocumentsDocumentIdServicePostResponses[keyof CreateDocumentServiceApiV1CasesDocumentsDocumentIdServicePostResponses];

export type UpdateDocumentServiceApiV1CasesServiceServiceIdPutData = {
    body: DocumentServiceUpdate;
    path: {
        /**
         * Service Id
         */
        service_id: number;
    };
    query?: never;
    url: '/api/v1/cases/service/{service_id}';
};

export type UpdateDocumentServiceApiV1CasesServiceServiceIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateDocumentServiceApiV1CasesServiceServiceIdPutError = UpdateDocumentServiceApiV1CasesServiceServiceIdPutErrors[keyof UpdateDocumentServiceApiV1CasesServiceServiceIdPutErrors];

export type UpdateDocumentServiceApiV1CasesServiceServiceIdPutResponses = {
    /**
     * Successful Response
     */
    200: DocumentServiceResponse;
};

export type UpdateDocumentServiceApiV1CasesServiceServiceIdPutResponse = UpdateDocumentServiceApiV1CasesServiceServiceIdPutResponses[keyof UpdateDocumentServiceApiV1CasesServiceServiceIdPutResponses];

export type CreateCaseNoteApiV1CasesNotesPostData = {
    body: CaseNoteCreate;
    path?: never;
    query?: never;
    url: '/api/v1/cases/notes';
};

export type CreateCaseNoteApiV1CasesNotesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateCaseNoteApiV1CasesNotesPostError = CreateCaseNoteApiV1CasesNotesPostErrors[keyof CreateCaseNoteApiV1CasesNotesPostErrors];

export type CreateCaseNoteApiV1CasesNotesPostResponses = {
    /**
     * Successful Response
     */
    201: CaseNoteResponse;
};

export type CreateCaseNoteApiV1CasesNotesPostResponse = CreateCaseNoteApiV1CasesNotesPostResponses[keyof CreateCaseNoteApiV1CasesNotesPostResponses];

export type GetCaseNotesApiV1CasesCaseIdNotesGetData = {
    body?: never;
    path: {
        /**
         * Case Id
         */
        case_id: number;
    };
    query?: {
        /**
         * Q
         */
        q?: string | null;
        /**
         * Note Type
         */
        note_type?: string | null;
        /**
         * Priority
         */
        priority?: string | null;
        /**
         * Is Completed
         */
        is_completed?: boolean | null;
        /**
         * Has Reminder
         */
        has_reminder?: boolean | null;
        /**
         * From Date
         */
        from_date?: string | null;
        /**
         * To Date
         */
        to_date?: string | null;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/api/v1/cases/{case_id}/notes';
};

export type GetCaseNotesApiV1CasesCaseIdNotesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetCaseNotesApiV1CasesCaseIdNotesGetError = GetCaseNotesApiV1CasesCaseIdNotesGetErrors[keyof GetCaseNotesApiV1CasesCaseIdNotesGetErrors];

export type GetCaseNotesApiV1CasesCaseIdNotesGetResponses = {
    /**
     * Response Get Case Notes Api V1 Cases  Case Id  Notes Get
     * Successful Response
     */
    200: Array<CaseNoteResponse>;
};

export type GetCaseNotesApiV1CasesCaseIdNotesGetResponse = GetCaseNotesApiV1CasesCaseIdNotesGetResponses[keyof GetCaseNotesApiV1CasesCaseIdNotesGetResponses];

export type DeleteCaseNoteApiV1CasesNotesNoteIdDeleteData = {
    body?: never;
    path: {
        /**
         * Note Id
         */
        note_id: number;
    };
    query?: never;
    url: '/api/v1/cases/notes/{note_id}';
};

export type DeleteCaseNoteApiV1CasesNotesNoteIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteCaseNoteApiV1CasesNotesNoteIdDeleteError = DeleteCaseNoteApiV1CasesNotesNoteIdDeleteErrors[keyof DeleteCaseNoteApiV1CasesNotesNoteIdDeleteErrors];

export type DeleteCaseNoteApiV1CasesNotesNoteIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteCaseNoteApiV1CasesNotesNoteIdDeleteResponse = DeleteCaseNoteApiV1CasesNotesNoteIdDeleteResponses[keyof DeleteCaseNoteApiV1CasesNotesNoteIdDeleteResponses];

export type UpdateCaseNoteApiV1CasesNotesNoteIdPutData = {
    body: CaseNoteUpdate;
    path: {
        /**
         * Note Id
         */
        note_id: number;
    };
    query?: never;
    url: '/api/v1/cases/notes/{note_id}';
};

export type UpdateCaseNoteApiV1CasesNotesNoteIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateCaseNoteApiV1CasesNotesNoteIdPutError = UpdateCaseNoteApiV1CasesNotesNoteIdPutErrors[keyof UpdateCaseNoteApiV1CasesNotesNoteIdPutErrors];

export type UpdateCaseNoteApiV1CasesNotesNoteIdPutResponses = {
    /**
     * Successful Response
     */
    200: CaseNoteResponse;
};

export type UpdateCaseNoteApiV1CasesNotesNoteIdPutResponse = UpdateCaseNoteApiV1CasesNotesNoteIdPutResponses[keyof UpdateCaseNoteApiV1CasesNotesNoteIdPutResponses];

export type GetSmartTextApiV1CasesDocumentsDocumentIdSmartTextGetData = {
    body?: never;
    path: {
        /**
         * Document Id
         */
        document_id: number;
    };
    query?: never;
    url: '/api/v1/cases/documents/{document_id}/smart-text';
};

export type GetSmartTextApiV1CasesDocumentsDocumentIdSmartTextGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetSmartTextApiV1CasesDocumentsDocumentIdSmartTextGetError = GetSmartTextApiV1CasesDocumentsDocumentIdSmartTextGetErrors[keyof GetSmartTextApiV1CasesDocumentsDocumentIdSmartTextGetErrors];

export type GetSmartTextApiV1CasesDocumentsDocumentIdSmartTextGetResponses = {
    /**
     * Successful Response
     */
    200: DocumentSmartTextResponse;
};

export type GetSmartTextApiV1CasesDocumentsDocumentIdSmartTextGetResponse = GetSmartTextApiV1CasesDocumentsDocumentIdSmartTextGetResponses[keyof GetSmartTextApiV1CasesDocumentsDocumentIdSmartTextGetResponses];

export type CreateSmartTextApiV1CasesDocumentsDocumentIdSmartTextPostData = {
    body: DocumentSmartTextCreate;
    path: {
        /**
         * Document Id
         */
        document_id: number;
    };
    query?: never;
    url: '/api/v1/cases/documents/{document_id}/smart-text';
};

export type CreateSmartTextApiV1CasesDocumentsDocumentIdSmartTextPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateSmartTextApiV1CasesDocumentsDocumentIdSmartTextPostError = CreateSmartTextApiV1CasesDocumentsDocumentIdSmartTextPostErrors[keyof CreateSmartTextApiV1CasesDocumentsDocumentIdSmartTextPostErrors];

export type CreateSmartTextApiV1CasesDocumentsDocumentIdSmartTextPostResponses = {
    /**
     * Successful Response
     */
    201: DocumentSmartTextResponse;
};

export type CreateSmartTextApiV1CasesDocumentsDocumentIdSmartTextPostResponse = CreateSmartTextApiV1CasesDocumentsDocumentIdSmartTextPostResponses[keyof CreateSmartTextApiV1CasesDocumentsDocumentIdSmartTextPostResponses];

export type UpdateSmartTextApiV1CasesSmartTextSmartTextIdPutData = {
    body: DocumentSmartTextUpdate;
    path: {
        /**
         * Smart Text Id
         */
        smart_text_id: number;
    };
    query?: never;
    url: '/api/v1/cases/smart-text/{smart_text_id}';
};

export type UpdateSmartTextApiV1CasesSmartTextSmartTextIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateSmartTextApiV1CasesSmartTextSmartTextIdPutError = UpdateSmartTextApiV1CasesSmartTextSmartTextIdPutErrors[keyof UpdateSmartTextApiV1CasesSmartTextSmartTextIdPutErrors];

export type UpdateSmartTextApiV1CasesSmartTextSmartTextIdPutResponses = {
    /**
     * Successful Response
     */
    200: DocumentSmartTextResponse;
};

export type UpdateSmartTextApiV1CasesSmartTextSmartTextIdPutResponse = UpdateSmartTextApiV1CasesSmartTextSmartTextIdPutResponses[keyof UpdateSmartTextApiV1CasesSmartTextSmartTextIdPutResponses];

export type ListMarriagesApiV1MarriagesGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Skip
         */
        skip?: number;
        /**
         * Limit
         */
        limit?: number;
        /**
         * Person Id
         * Filter by person ID
         */
        person_id?: number | null;
        /**
         * Current Status
         * Filter by current status
         */
        current_status?: string | null;
    };
    url: '/api/v1/marriages';
};

export type ListMarriagesApiV1MarriagesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListMarriagesApiV1MarriagesGetError = ListMarriagesApiV1MarriagesGetErrors[keyof ListMarriagesApiV1MarriagesGetErrors];

export type ListMarriagesApiV1MarriagesGetResponses = {
    /**
     * Response List Marriages Api V1 Marriages Get
     * Successful Response
     */
    200: Array<MarriageResponse>;
};

export type ListMarriagesApiV1MarriagesGetResponse = ListMarriagesApiV1MarriagesGetResponses[keyof ListMarriagesApiV1MarriagesGetResponses];

export type CreateMarriageApiV1MarriagesPostData = {
    body: MarriageCreate;
    path?: never;
    query?: never;
    url: '/api/v1/marriages';
};

export type CreateMarriageApiV1MarriagesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateMarriageApiV1MarriagesPostError = CreateMarriageApiV1MarriagesPostErrors[keyof CreateMarriageApiV1MarriagesPostErrors];

export type CreateMarriageApiV1MarriagesPostResponses = {
    /**
     * Successful Response
     */
    200: MarriageResponse;
};

export type CreateMarriageApiV1MarriagesPostResponse = CreateMarriageApiV1MarriagesPostResponses[keyof CreateMarriageApiV1MarriagesPostResponses];

export type DeleteMarriageApiV1MarriagesMarriageIdDeleteData = {
    body?: never;
    path: {
        /**
         * Marriage Id
         */
        marriage_id: number;
    };
    query?: never;
    url: '/api/v1/marriages/{marriage_id}';
};

export type DeleteMarriageApiV1MarriagesMarriageIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMarriageApiV1MarriagesMarriageIdDeleteError = DeleteMarriageApiV1MarriagesMarriageIdDeleteErrors[keyof DeleteMarriageApiV1MarriagesMarriageIdDeleteErrors];

export type DeleteMarriageApiV1MarriagesMarriageIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type GetMarriageApiV1MarriagesMarriageIdGetData = {
    body?: never;
    path: {
        /**
         * Marriage Id
         */
        marriage_id: number;
    };
    query?: never;
    url: '/api/v1/marriages/{marriage_id}';
};

export type GetMarriageApiV1MarriagesMarriageIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMarriageApiV1MarriagesMarriageIdGetError = GetMarriageApiV1MarriagesMarriageIdGetErrors[keyof GetMarriageApiV1MarriagesMarriageIdGetErrors];

export type GetMarriageApiV1MarriagesMarriageIdGetResponses = {
    /**
     * Successful Response
     */
    200: MarriageResponse;
};

export type GetMarriageApiV1MarriagesMarriageIdGetResponse = GetMarriageApiV1MarriagesMarriageIdGetResponses[keyof GetMarriageApiV1MarriagesMarriageIdGetResponses];

export type UpdateMarriageApiV1MarriagesMarriageIdPutData = {
    body: MarriageUpdate;
    path: {
        /**
         * Marriage Id
         */
        marriage_id: number;
    };
    query?: never;
    url: '/api/v1/marriages/{marriage_id}';
};

export type UpdateMarriageApiV1MarriagesMarriageIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateMarriageApiV1MarriagesMarriageIdPutError = UpdateMarriageApiV1MarriagesMarriageIdPutErrors[keyof UpdateMarriageApiV1MarriagesMarriageIdPutErrors];

export type UpdateMarriageApiV1MarriagesMarriageIdPutResponses = {
    /**
     * Successful Response
     */
    200: MarriageResponse;
};

export type UpdateMarriageApiV1MarriagesMarriageIdPutResponse = UpdateMarriageApiV1MarriagesMarriageIdPutResponses[keyof UpdateMarriageApiV1MarriagesMarriageIdPutResponses];

export type ListMarriageChildrenApiV1MarriagesMarriageIdChildrenGetData = {
    body?: never;
    path: {
        /**
         * Marriage Id
         */
        marriage_id: number;
    };
    query?: never;
    url: '/api/v1/marriages/{marriage_id}/children';
};

export type ListMarriageChildrenApiV1MarriagesMarriageIdChildrenGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListMarriageChildrenApiV1MarriagesMarriageIdChildrenGetError = ListMarriageChildrenApiV1MarriagesMarriageIdChildrenGetErrors[keyof ListMarriageChildrenApiV1MarriagesMarriageIdChildrenGetErrors];

export type ListMarriageChildrenApiV1MarriagesMarriageIdChildrenGetResponses = {
    /**
     * Response List Marriage Children Api V1 Marriages  Marriage Id  Children Get
     * Successful Response
     */
    200: Array<MarriageChildrenResponse>;
};

export type ListMarriageChildrenApiV1MarriagesMarriageIdChildrenGetResponse = ListMarriageChildrenApiV1MarriagesMarriageIdChildrenGetResponses[keyof ListMarriageChildrenApiV1MarriagesMarriageIdChildrenGetResponses];

export type AddChildToMarriageApiV1MarriagesMarriageIdChildrenPostData = {
    body: MarriageChildrenCreate;
    path: {
        /**
         * Marriage Id
         */
        marriage_id: number;
    };
    query?: never;
    url: '/api/v1/marriages/{marriage_id}/children';
};

export type AddChildToMarriageApiV1MarriagesMarriageIdChildrenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type AddChildToMarriageApiV1MarriagesMarriageIdChildrenPostError = AddChildToMarriageApiV1MarriagesMarriageIdChildrenPostErrors[keyof AddChildToMarriageApiV1MarriagesMarriageIdChildrenPostErrors];

export type AddChildToMarriageApiV1MarriagesMarriageIdChildrenPostResponses = {
    /**
     * Successful Response
     */
    200: MarriageChildrenResponse;
};

export type AddChildToMarriageApiV1MarriagesMarriageIdChildrenPostResponse = AddChildToMarriageApiV1MarriagesMarriageIdChildrenPostResponses[keyof AddChildToMarriageApiV1MarriagesMarriageIdChildrenPostResponses];

export type RemoveChildFromMarriageApiV1MarriagesMarriageIdChildrenChildIdDeleteData = {
    body?: never;
    path: {
        /**
         * Marriage Id
         */
        marriage_id: number;
        /**
         * Child Id
         */
        child_id: number;
    };
    query?: never;
    url: '/api/v1/marriages/{marriage_id}/children/{child_id}';
};

export type RemoveChildFromMarriageApiV1MarriagesMarriageIdChildrenChildIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RemoveChildFromMarriageApiV1MarriagesMarriageIdChildrenChildIdDeleteError = RemoveChildFromMarriageApiV1MarriagesMarriageIdChildrenChildIdDeleteErrors[keyof RemoveChildFromMarriageApiV1MarriagesMarriageIdChildrenChildIdDeleteErrors];

export type RemoveChildFromMarriageApiV1MarriagesMarriageIdChildrenChildIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type UpdateMarriageChildApiV1MarriagesMarriageIdChildrenChildIdPutData = {
    body: MarriageChildrenUpdate;
    path: {
        /**
         * Marriage Id
         */
        marriage_id: number;
        /**
         * Child Id
         */
        child_id: number;
    };
    query?: never;
    url: '/api/v1/marriages/{marriage_id}/children/{child_id}';
};

export type UpdateMarriageChildApiV1MarriagesMarriageIdChildrenChildIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateMarriageChildApiV1MarriagesMarriageIdChildrenChildIdPutError = UpdateMarriageChildApiV1MarriagesMarriageIdChildrenChildIdPutErrors[keyof UpdateMarriageChildApiV1MarriagesMarriageIdChildrenChildIdPutErrors];

export type UpdateMarriageChildApiV1MarriagesMarriageIdChildrenChildIdPutResponses = {
    /**
     * Successful Response
     */
    200: MarriageChildrenResponse;
};

export type UpdateMarriageChildApiV1MarriagesMarriageIdChildrenChildIdPutResponse = UpdateMarriageChildApiV1MarriagesMarriageIdChildrenChildIdPutResponses[keyof UpdateMarriageChildApiV1MarriagesMarriageIdChildrenChildIdPutResponses];

export type GetPersonMarriagesApiV1MarriagesPeoplePersonIdMarriagesGetData = {
    body?: never;
    path: {
        /**
         * Person Id
         */
        person_id: number;
    };
    query?: {
        /**
         * Include All
         * Include all marriages, not just as primary person
         */
        include_all?: boolean;
    };
    url: '/api/v1/marriages/people/{person_id}/marriages';
};

export type GetPersonMarriagesApiV1MarriagesPeoplePersonIdMarriagesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetPersonMarriagesApiV1MarriagesPeoplePersonIdMarriagesGetError = GetPersonMarriagesApiV1MarriagesPeoplePersonIdMarriagesGetErrors[keyof GetPersonMarriagesApiV1MarriagesPeoplePersonIdMarriagesGetErrors];

export type GetPersonMarriagesApiV1MarriagesPeoplePersonIdMarriagesGetResponses = {
    /**
     * Response Get Person Marriages Api V1 Marriages People  Person Id  Marriages Get
     * Successful Response
     */
    200: Array<MarriageResponse>;
};

export type GetPersonMarriagesApiV1MarriagesPeoplePersonIdMarriagesGetResponse = GetPersonMarriagesApiV1MarriagesPeoplePersonIdMarriagesGetResponses[keyof GetPersonMarriagesApiV1MarriagesPeoplePersonIdMarriagesGetResponses];

export type GetMarriageWithChildrenApiV1MarriagesMarriageIdWithChildrenGetData = {
    body?: never;
    path: {
        /**
         * Marriage Id
         */
        marriage_id: number;
    };
    query?: never;
    url: '/api/v1/marriages/{marriage_id}/with-children';
};

export type GetMarriageWithChildrenApiV1MarriagesMarriageIdWithChildrenGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetMarriageWithChildrenApiV1MarriagesMarriageIdWithChildrenGetError = GetMarriageWithChildrenApiV1MarriagesMarriageIdWithChildrenGetErrors[keyof GetMarriageWithChildrenApiV1MarriagesMarriageIdWithChildrenGetErrors];

export type GetMarriageWithChildrenApiV1MarriagesMarriageIdWithChildrenGetResponses = {
    /**
     * Successful Response
     */
    200: MarriageWithChildrenResponse;
};

export type GetMarriageWithChildrenApiV1MarriagesMarriageIdWithChildrenGetResponse = GetMarriageWithChildrenApiV1MarriagesMarriageIdWithChildrenGetResponses[keyof GetMarriageWithChildrenApiV1MarriagesMarriageIdWithChildrenGetResponses];

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ConnectionHealthStatusHealthConnectionsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health/connections';
};

export type ConnectionHealthStatusHealthConnectionsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:8000' | (string & {});
};