'use client'

import { useState, useMemo } from 'react'
import { useSession } from 'next-auth/react'
import { Button } from '@/components/ui/button'
import { ExternalLink, Plus } from 'lucide-react'
import { toast } from 'sonner'
import { VideoUrlDialog } from './video-url-dialog'
import { VideoHtml5Dialog } from './video-html5-dialog'
import { createVideoApiV1VideosPost, uploadFileApiV1StorageUploadPost } from '@/lib/api/sdk.gen'
import type {
    VideoCreateFile,
    VideoCreateHtml5,
    VideoCreateUrl,
} from '@/lib/api/types.gen'
import { parseVideoUrl } from '@/lib/video-metadata'

interface AddVideoButtonProps {
    onVideoCreated?: () => void
}

export function AddVideoButton({ onVideoCreated }: AddVideoButtonProps) {
    const { data: session } = useSession()
    const [openDialog, setOpenDialog] = useState<'url' | 'html5' | null>(null)

    const authToken = useMemo(() => session?.accessToken, [session])
    const baseUrl = useMemo(
        () => process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000',
        [],
    )

    const handleUrlVideoSubmit = async (data: any) => {
        if (!authToken) {
            toast.error('You must be signed in to create videos')
            return
        }

        try {
            // Parse the video URL to extract platform and video_id
            const urlInfo = parseVideoUrl(data.url)
            if (!urlInfo) {
                toast.error('Invalid video URL. Please use a supported platform (YouTube, Vimeo, etc.)')
                return
            }

            // Convert platform names to match backend enum
            const platformMap = {
                'youtube': 'youtube' as const,
                'vimeo': 'vimeo' as const,
                'dailymotion': 'vimeo' as const, // Backend might only support youtube/vimeo
                'twitch': 'vimeo' as const, // Backend might only support youtube/vimeo
            }

            const platform = platformMap[urlInfo.platform as keyof typeof platformMap] || 'youtube'

            // Prepare tags array
            const tags = data.tags ? data.tags.split(',').map((tag: string) => tag.trim()).filter(Boolean) : null
            
            // Parse video_date if provided
            const videoDate = data.video_date ? new Date(data.video_date).toISOString() : null

            const payload: VideoCreateUrl = {
                type: 'video_url',
                profile: {
                    title: data.title,
                    description: data.description || null,
                    tags: tags,
                    thumbnail_file_id: null,
                    duration: null,
                    video_date: videoDate,
                },
                data: {
                    platform: platform,
                    url: data.url,
                    video_id: urlInfo.videoId,
                    embed_url: null, // Will be generated by backend if needed
                },
            }

            await createVideoApiV1VideosPost<true>({
                baseUrl,
                auth: authToken,
                throwOnError: true,
                body: payload,
            })

            toast.success('Video URL added successfully')
            onVideoCreated?.()
        } catch (error) {
            console.error('Failed to create video URL:', error)
            toast.error('Failed to create video URL')
            throw error
        }
    }

    const handleHtml5VideoSubmit = async (data: any) => {
        if (!authToken) {
            toast.error('You must be signed in to upload videos')
            return
        }

        try {
            console.log('HTML5 video upload data:', data)
            
            // Use the slug from the form or generate one from title as fallback
            const slug = data.slug || data.title.toLowerCase()
                .replace(/[^\w\s-]/g, '') // Remove special chars
                .replace(/\s+/g, '-') // Replace spaces with hyphens
                .replace(/-+/g, '-') // Replace multiple hyphens with single
                .trim()
            
            // First, upload all video files and get their file IDs
            const uploadedResolutions = []
            
            for (const videoFileData of data.videoFiles) {
                if (videoFileData.file) {
                    // Upload video file using SDK with slug
                    const uploadResult = await uploadFileApiV1StorageUploadPost<true>({
                        baseUrl,
                        auth: authToken,
                        throwOnError: true,
                        body: { file: videoFileData.file },
                        query: { 
                            category: 'videos',
                            slug: slug
                        },
                    })
                    
                    uploadedResolutions.push({
                        resolution: videoFileData.quality || 'none',
                        stored_file_id: uploadResult.data.id,
                        width: null,  // Will be detected by backend if needed
                        height: null, // Will be detected by backend if needed
                    })
                }
            }
            
            // Upload poster image if provided
            let posterFileId = null
            if (data.posterFile) {
                try {
                    const posterUploadResult = await uploadFileApiV1StorageUploadPost<true>({
                        baseUrl,
                        auth: authToken,
                        throwOnError: true,
                        body: { file: data.posterFile },
                        query: { 
                            category: 'images',
                            slug: slug
                        },
                    })
                    posterFileId = posterUploadResult.data.id
                } catch (error) {
                    console.warn('Failed to upload poster image:', error)
                    // Continue without poster image
                }
            }
            
            // Prepare tags array
            const tags = data.tags ? data.tags.split(',').map((tag: string) => tag.trim()).filter(Boolean) : null
            
            // Parse video_date if provided
            const videoDate = data.video_date ? new Date(data.video_date).toISOString() : null
            
            // Create the HTML5 video record
            const payload: VideoCreateHtml5 = {
                type: 'html5_video',
                profile: {
                    title: data.title,
                    slug: slug,  // Include the slug
                    description: data.description || null,
                    tags: tags,
                    thumbnail_file_id: posterFileId,
                    duration: null, // Could be extracted from video metadata
                    video_date: videoDate,
                },
                data: {
                    resolutions: uploadedResolutions,
                },
            }
            
            await createVideoApiV1VideosPost<true>({
                baseUrl,
                auth: authToken,
                throwOnError: true,
                body: payload,
            })
            
            toast.success('Video files uploaded successfully')
            onVideoCreated?.()
        } catch (error) {
            console.error('Failed to upload HTML5 video:', error)
            toast.error('Failed to upload HTML5 video')
            throw error
        }
    }


    return (
        <>
            <div className="flex gap-2">
                <Button 
                    variant="outline"
                    onClick={() => {
                        console.log('Opening URL dialog')
                        setOpenDialog('url')
                    }}
                >
                    <ExternalLink className="h-4 w-4 mr-2" />
                    Add URL
                </Button>
                <Button 
                    onClick={() => {
                        console.log('Opening HTML5 dialog')
                        setOpenDialog('html5')
                    }}
                >
                    <Plus className="h-4 w-4 mr-2" />
                    Upload Video
                </Button>
            </div>

            <VideoUrlDialog
                open={openDialog === 'url'}
                onOpenChange={(open) => {
                    if (!open) {
                        setOpenDialog(null)
                    }
                }}
                onSubmit={handleUrlVideoSubmit}
            />

            <VideoHtml5Dialog
                open={openDialog === 'html5'}
                onOpenChange={(open) => {
                    if (!open) {
                        setOpenDialog(null)
                    }
                }}
                onSubmit={handleHtml5VideoSubmit}
            />
        </>
    )
}